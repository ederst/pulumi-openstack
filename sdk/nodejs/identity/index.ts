// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export * from "./applicationCredential";
export * from "./ec2CredentialV3";
export * from "./endpointV3";
export * from "./getAuthScope";
export * from "./getEndpoint";
export * from "./getGroup";
export * from "./getProject";
export * from "./getRole";
export * from "./getService";
export * from "./getUser";
export * from "./groupV3";
export * from "./project";
export * from "./role";
export * from "./roleAssignment";
export * from "./serviceV3";
export * from "./user";
export * from "./userMembershipV3";

// Import resources to register:
import { ApplicationCredential } from "./applicationCredential";
import { Ec2CredentialV3 } from "./ec2CredentialV3";
import { EndpointV3 } from "./endpointV3";
import { GroupV3 } from "./groupV3";
import { Project } from "./project";
import { Role } from "./role";
import { RoleAssignment } from "./roleAssignment";
import { ServiceV3 } from "./serviceV3";
import { User } from "./user";
import { UserMembershipV3 } from "./userMembershipV3";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "openstack:identity/applicationCredential:ApplicationCredential":
                return new ApplicationCredential(name, <any>undefined, { urn })
            case "openstack:identity/ec2CredentialV3:Ec2CredentialV3":
                return new Ec2CredentialV3(name, <any>undefined, { urn })
            case "openstack:identity/endpointV3:EndpointV3":
                return new EndpointV3(name, <any>undefined, { urn })
            case "openstack:identity/groupV3:GroupV3":
                return new GroupV3(name, <any>undefined, { urn })
            case "openstack:identity/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "openstack:identity/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "openstack:identity/roleAssignment:RoleAssignment":
                return new RoleAssignment(name, <any>undefined, { urn })
            case "openstack:identity/serviceV3:ServiceV3":
                return new ServiceV3(name, <any>undefined, { urn })
            case "openstack:identity/user:User":
                return new User(name, <any>undefined, { urn })
            case "openstack:identity/userMembershipV3:UserMembershipV3":
                return new UserMembershipV3(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openstack", "identity/applicationCredential", _module)
pulumi.runtime.registerResourceModule("openstack", "identity/ec2CredentialV3", _module)
pulumi.runtime.registerResourceModule("openstack", "identity/endpointV3", _module)
pulumi.runtime.registerResourceModule("openstack", "identity/groupV3", _module)
pulumi.runtime.registerResourceModule("openstack", "identity/project", _module)
pulumi.runtime.registerResourceModule("openstack", "identity/role", _module)
pulumi.runtime.registerResourceModule("openstack", "identity/roleAssignment", _module)
pulumi.runtime.registerResourceModule("openstack", "identity/serviceV3", _module)
pulumi.runtime.registerResourceModule("openstack", "identity/user", _module)
pulumi.runtime.registerResourceModule("openstack", "identity/userMembershipV3", _module)
