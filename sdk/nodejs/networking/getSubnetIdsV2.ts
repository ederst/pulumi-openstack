// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Use this data source to get a list of Openstack Subnet IDs matching the
 * specified criteria.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as openstack from "@pulumi/openstack";
 *
 * const subnets = pulumi.output(openstack.networking.getSubnetIdsV2({
 *     nameRegex: "public",
 *     tags: ["public"],
 * }, { async: true }));
 * ```
 */
export function getSubnetIdsV2(args?: GetSubnetIdsV2Args, opts?: pulumi.InvokeOptions): Promise<GetSubnetIdsV2Result> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("openstack:networking/getSubnetIdsV2:getSubnetIdsV2", {
        "cidr": args.cidr,
        "description": args.description,
        "dhcpEnabled": args.dhcpEnabled,
        "gatewayIp": args.gatewayIp,
        "ipVersion": args.ipVersion,
        "ipv6AddressMode": args.ipv6AddressMode,
        "ipv6RaMode": args.ipv6RaMode,
        "name": args.name,
        "nameRegex": args.nameRegex,
        "networkId": args.networkId,
        "region": args.region,
        "sortDirection": args.sortDirection,
        "sortKey": args.sortKey,
        "subnetpoolId": args.subnetpoolId,
        "tags": args.tags,
        "tenantId": args.tenantId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubnetIdsV2.
 */
export interface GetSubnetIdsV2Args {
    /**
     * The CIDR of the subnet.
     */
    readonly cidr?: string;
    /**
     * Human-readable description of the subnet.
     */
    readonly description?: string;
    /**
     * If the subnet has DHCP enabled.
     */
    readonly dhcpEnabled?: boolean;
    /**
     * The IP of the subnet's gateway.
     */
    readonly gatewayIp?: string;
    /**
     * The IP version of the subnet (either 4 or 6).
     */
    readonly ipVersion?: number;
    /**
     * The IPv6 address mode. Valid values are
     * `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     */
    readonly ipv6AddressMode?: string;
    /**
     * The IPv6 Router Advertisement mode. Valid values
     * are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
     */
    readonly ipv6RaMode?: string;
    /**
     * The name of the subnet.
     */
    readonly name?: string;
    readonly nameRegex?: string;
    /**
     * The ID of the network the subnet belongs to.
     */
    readonly networkId?: string;
    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve subnet ids. If omitted, the
     * `region` argument of the provider is used.
     */
    readonly region?: string;
    /**
     * Order the results in either `asc` or `desc`.
     * Defaults to none.
     */
    readonly sortDirection?: string;
    /**
     * Sort subnets based on a certain key. Defaults to none.
     */
    readonly sortKey?: string;
    /**
     * The ID of the subnetpool associated with the subnet.
     */
    readonly subnetpoolId?: string;
    /**
     * The list of subnet tags to filter.
     */
    readonly tags?: string[];
    /**
     * The owner of the subnet.
     */
    readonly tenantId?: string;
}

/**
 * A collection of values returned by getSubnetIdsV2.
 */
export interface GetSubnetIdsV2Result {
    readonly cidr?: string;
    readonly description?: string;
    readonly dhcpEnabled?: boolean;
    readonly gatewayIp?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids: string[];
    readonly ipVersion?: number;
    readonly ipv6AddressMode?: string;
    readonly ipv6RaMode: string;
    readonly name?: string;
    readonly nameRegex?: string;
    readonly networkId?: string;
    readonly region: string;
    readonly sortDirection?: string;
    readonly sortKey?: string;
    readonly subnetpoolId?: string;
    readonly tags?: string[];
    readonly tenantId?: string;
}
