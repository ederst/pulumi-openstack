// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keymanager

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/keymanager_secret_v1.html.markdown.
type SecretV1 struct {
	s *pulumi.ResourceState
}

// NewSecretV1 registers a new resource with the given unique name, arguments, and options.
func NewSecretV1(ctx *pulumi.Context,
	name string, args *SecretV1Args, opts ...pulumi.ResourceOpt) (*SecretV1, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["algorithm"] = nil
		inputs["bitLength"] = nil
		inputs["expiration"] = nil
		inputs["metadata"] = nil
		inputs["mode"] = nil
		inputs["name"] = nil
		inputs["payload"] = nil
		inputs["payloadContentEncoding"] = nil
		inputs["payloadContentType"] = nil
		inputs["region"] = nil
		inputs["secretType"] = nil
	} else {
		inputs["algorithm"] = args.Algorithm
		inputs["bitLength"] = args.BitLength
		inputs["expiration"] = args.Expiration
		inputs["metadata"] = args.Metadata
		inputs["mode"] = args.Mode
		inputs["name"] = args.Name
		inputs["payload"] = args.Payload
		inputs["payloadContentEncoding"] = args.PayloadContentEncoding
		inputs["payloadContentType"] = args.PayloadContentType
		inputs["region"] = args.Region
		inputs["secretType"] = args.SecretType
	}
	inputs["allMetadata"] = nil
	inputs["contentTypes"] = nil
	inputs["createdAt"] = nil
	inputs["creatorId"] = nil
	inputs["secretRef"] = nil
	inputs["status"] = nil
	inputs["updatedAt"] = nil
	s, err := ctx.RegisterResource("openstack:keymanager/secretV1:SecretV1", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretV1{s: s}, nil
}

// GetSecretV1 gets an existing SecretV1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretV1(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SecretV1State, opts ...pulumi.ResourceOpt) (*SecretV1, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["algorithm"] = state.Algorithm
		inputs["allMetadata"] = state.AllMetadata
		inputs["bitLength"] = state.BitLength
		inputs["contentTypes"] = state.ContentTypes
		inputs["createdAt"] = state.CreatedAt
		inputs["creatorId"] = state.CreatorId
		inputs["expiration"] = state.Expiration
		inputs["metadata"] = state.Metadata
		inputs["mode"] = state.Mode
		inputs["name"] = state.Name
		inputs["payload"] = state.Payload
		inputs["payloadContentEncoding"] = state.PayloadContentEncoding
		inputs["payloadContentType"] = state.PayloadContentType
		inputs["region"] = state.Region
		inputs["secretRef"] = state.SecretRef
		inputs["secretType"] = state.SecretType
		inputs["status"] = state.Status
		inputs["updatedAt"] = state.UpdatedAt
	}
	s, err := ctx.ReadResource("openstack:keymanager/secretV1:SecretV1", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SecretV1{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SecretV1) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SecretV1) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Metadata provided by a user or system for informational purposes.
func (r *SecretV1) Algorithm() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["algorithm"])
}

// The map of metadata, assigned on the secret, which has been
// explicitly and implicitly added.
func (r *SecretV1) AllMetadata() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["allMetadata"])
}

// Metadata provided by a user or system for informational purposes.
func (r *SecretV1) BitLength() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["bitLength"])
}

// The map of the content types, assigned on the secret.
func (r *SecretV1) ContentTypes() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["contentTypes"])
}

// The date the secret was created.
func (r *SecretV1) CreatedAt() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["createdAt"])
}

// The creator of the secret.
func (r *SecretV1) CreatorId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["creatorId"])
}

// The expiration time of the secret in the RFC3339 timestamp format (e.g. `2019-03-09T12:58:49Z`). If omitted, a secret will never expire. Changing this creates a new secret.
func (r *SecretV1) Expiration() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["expiration"])
}

// Additional Metadata for the secret.
func (r *SecretV1) Metadata() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["metadata"])
}

// Metadata provided by a user or system for informational purposes.
func (r *SecretV1) Mode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["mode"])
}

// Human-readable name for the Secret. Does not have
// to be unique.
func (r *SecretV1) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The secret's data to be stored. **payload\_content\_type** must also be supplied if **payload** is included.
func (r *SecretV1) Payload() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["payload"])
}

// (required if **payload** is encoded) The encoding used for the payload to be able to include it in the JSON request. Must be either `base64` or `binary`.
func (r *SecretV1) PayloadContentEncoding() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["payloadContentEncoding"])
}

// (required if **payload** is included) The media type for the content of the payload. Must be one of `text/plain`, `text/plain;charset=utf-8`, `text/plain; charset=utf-8`, `application/octet-stream`, `application/pkcs8`.
func (r *SecretV1) PayloadContentType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["payloadContentType"])
}

// The region in which to obtain the V1 KeyManager client.
// A KeyManager client is needed to create a secret. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// V1 secret.
func (r *SecretV1) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// The secret reference / where to find the secret.
func (r *SecretV1) SecretRef() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["secretRef"])
}

// Used to indicate the type of secret being stored. For more information see [Secret types](https://docs.openstack.org/barbican/latest/api/reference/secret_types.html).
func (r *SecretV1) SecretType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["secretType"])
}

// The status of the secret.
func (r *SecretV1) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// The date the secret was last updated.
func (r *SecretV1) UpdatedAt() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["updatedAt"])
}

// Input properties used for looking up and filtering SecretV1 resources.
type SecretV1State struct {
	// Metadata provided by a user or system for informational purposes.
	Algorithm interface{}
	// The map of metadata, assigned on the secret, which has been
	// explicitly and implicitly added.
	AllMetadata interface{}
	// Metadata provided by a user or system for informational purposes.
	BitLength interface{}
	// The map of the content types, assigned on the secret.
	ContentTypes interface{}
	// The date the secret was created.
	CreatedAt interface{}
	// The creator of the secret.
	CreatorId interface{}
	// The expiration time of the secret in the RFC3339 timestamp format (e.g. `2019-03-09T12:58:49Z`). If omitted, a secret will never expire. Changing this creates a new secret.
	Expiration interface{}
	// Additional Metadata for the secret.
	Metadata interface{}
	// Metadata provided by a user or system for informational purposes.
	Mode interface{}
	// Human-readable name for the Secret. Does not have
	// to be unique.
	Name interface{}
	// The secret's data to be stored. **payload\_content\_type** must also be supplied if **payload** is included.
	Payload interface{}
	// (required if **payload** is encoded) The encoding used for the payload to be able to include it in the JSON request. Must be either `base64` or `binary`.
	PayloadContentEncoding interface{}
	// (required if **payload** is included) The media type for the content of the payload. Must be one of `text/plain`, `text/plain;charset=utf-8`, `text/plain; charset=utf-8`, `application/octet-stream`, `application/pkcs8`.
	PayloadContentType interface{}
	// The region in which to obtain the V1 KeyManager client.
	// A KeyManager client is needed to create a secret. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// V1 secret.
	Region interface{}
	// The secret reference / where to find the secret.
	SecretRef interface{}
	// Used to indicate the type of secret being stored. For more information see [Secret types](https://docs.openstack.org/barbican/latest/api/reference/secret_types.html).
	SecretType interface{}
	// The status of the secret.
	Status interface{}
	// The date the secret was last updated.
	UpdatedAt interface{}
}

// The set of arguments for constructing a SecretV1 resource.
type SecretV1Args struct {
	// Metadata provided by a user or system for informational purposes.
	Algorithm interface{}
	// Metadata provided by a user or system for informational purposes.
	BitLength interface{}
	// The expiration time of the secret in the RFC3339 timestamp format (e.g. `2019-03-09T12:58:49Z`). If omitted, a secret will never expire. Changing this creates a new secret.
	Expiration interface{}
	// Additional Metadata for the secret.
	Metadata interface{}
	// Metadata provided by a user or system for informational purposes.
	Mode interface{}
	// Human-readable name for the Secret. Does not have
	// to be unique.
	Name interface{}
	// The secret's data to be stored. **payload\_content\_type** must also be supplied if **payload** is included.
	Payload interface{}
	// (required if **payload** is encoded) The encoding used for the payload to be able to include it in the JSON request. Must be either `base64` or `binary`.
	PayloadContentEncoding interface{}
	// (required if **payload** is included) The media type for the content of the payload. Must be one of `text/plain`, `text/plain;charset=utf-8`, `text/plain; charset=utf-8`, `application/octet-stream`, `application/pkcs8`.
	PayloadContentType interface{}
	// The region in which to obtain the V1 KeyManager client.
	// A KeyManager client is needed to create a secret. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// V1 secret.
	Region interface{}
	// Used to indicate the type of secret being stored. For more information see [Secret types](https://docs.openstack.org/barbican/latest/api/reference/secret_types.html).
	SecretType interface{}
}
