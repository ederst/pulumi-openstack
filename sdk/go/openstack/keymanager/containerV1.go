// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keymanager

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V1 Barbican container resource within OpenStack.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/keymanager_container_v1.html.markdown.
type ContainerV1 struct {
	s *pulumi.ResourceState
}

// NewContainerV1 registers a new resource with the given unique name, arguments, and options.
func NewContainerV1(ctx *pulumi.Context,
	name string, args *ContainerV1Args, opts ...pulumi.ResourceOpt) (*ContainerV1, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["region"] = nil
		inputs["secretRefs"] = nil
		inputs["type"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["region"] = args.Region
		inputs["secretRefs"] = args.SecretRefs
		inputs["type"] = args.Type
	}
	inputs["consumers"] = nil
	inputs["containerRef"] = nil
	inputs["createdAt"] = nil
	inputs["creatorId"] = nil
	inputs["status"] = nil
	inputs["updatedAt"] = nil
	s, err := ctx.RegisterResource("openstack:keymanager/containerV1:ContainerV1", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ContainerV1{s: s}, nil
}

// GetContainerV1 gets an existing ContainerV1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerV1(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ContainerV1State, opts ...pulumi.ResourceOpt) (*ContainerV1, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["consumers"] = state.Consumers
		inputs["containerRef"] = state.ContainerRef
		inputs["createdAt"] = state.CreatedAt
		inputs["creatorId"] = state.CreatorId
		inputs["name"] = state.Name
		inputs["region"] = state.Region
		inputs["secretRefs"] = state.SecretRefs
		inputs["status"] = state.Status
		inputs["type"] = state.Type
		inputs["updatedAt"] = state.UpdatedAt
	}
	s, err := ctx.ReadResource("openstack:keymanager/containerV1:ContainerV1", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ContainerV1{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ContainerV1) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ContainerV1) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The list of the container consumers. The structure is described below.
func (r *ContainerV1) Consumers() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["consumers"])
}

// The container reference / where to find the container.
func (r *ContainerV1) ContainerRef() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["containerRef"])
}

// The date the container was created.
func (r *ContainerV1) CreatedAt() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["createdAt"])
}

// The creator of the container.
func (r *ContainerV1) CreatorId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["creatorId"])
}

// Human-readable name for the Container. Does not have
// to be unique.
func (r *ContainerV1) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The region in which to obtain the V1 KeyManager client.
// A KeyManager client is needed to create a container. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// V1 container.
func (r *ContainerV1) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// A set of dictionaries containing references to secrets. The structure is described
// below.
func (r *ContainerV1) SecretRefs() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["secretRefs"])
}

// The status of the container.
func (r *ContainerV1) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// Used to indicate the type of container. Must be one of `generic`, `rsa` or `certificate`.
func (r *ContainerV1) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// The date the container was last updated.
func (r *ContainerV1) UpdatedAt() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["updatedAt"])
}

// Input properties used for looking up and filtering ContainerV1 resources.
type ContainerV1State struct {
	// The list of the container consumers. The structure is described below.
	Consumers interface{}
	// The container reference / where to find the container.
	ContainerRef interface{}
	// The date the container was created.
	CreatedAt interface{}
	// The creator of the container.
	CreatorId interface{}
	// Human-readable name for the Container. Does not have
	// to be unique.
	Name interface{}
	// The region in which to obtain the V1 KeyManager client.
	// A KeyManager client is needed to create a container. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// V1 container.
	Region interface{}
	// A set of dictionaries containing references to secrets. The structure is described
	// below.
	SecretRefs interface{}
	// The status of the container.
	Status interface{}
	// Used to indicate the type of container. Must be one of `generic`, `rsa` or `certificate`.
	Type interface{}
	// The date the container was last updated.
	UpdatedAt interface{}
}

// The set of arguments for constructing a ContainerV1 resource.
type ContainerV1Args struct {
	// Human-readable name for the Container. Does not have
	// to be unique.
	Name interface{}
	// The region in which to obtain the V1 KeyManager client.
	// A KeyManager client is needed to create a container. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// V1 container.
	Region interface{}
	// A set of dictionaries containing references to secrets. The structure is described
	// below.
	SecretRefs interface{}
	// Used to indicate the type of container. Must be one of `generic`, `rsa` or `certificate`.
	Type interface{}
}
