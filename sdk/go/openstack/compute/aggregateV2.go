// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Host Aggregate within Openstack Nova.
//
// ## Example Usage
// ### Full example
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/compute"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewAggregateV2(ctx, "dellServers", &compute.AggregateV2Args{
// 			Hosts: pulumi.StringArray{
// 				pulumi.String("myhost01.example.com"),
// 				pulumi.String("myhost02.example.com"),
// 			},
// 			Metadata: pulumi.StringMap{
// 				"cpus": pulumi.String("56"),
// 			},
// 			Zone: pulumi.String("nova"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Minimum required example
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/compute"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewAggregateV2(ctx, "test", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// You can import an existing Host Aggregate by their ID.
//
// ```sh
//  $ pulumi import openstack:compute/aggregateV2:AggregateV2 myaggregate 24
// ```
//
//  The ID can be obtained with an openstack command$ openstack aggregate list +----+------+-------------------+ | ID | Name | Availability Zone | +----+------+-------------------+ | 59 | test | None
//
// | +----+------+-------------------+
type AggregateV2 struct {
	pulumi.CustomResourceState

	// The list of hosts contained in the Host Aggregate. The hosts must be added
	// to Openstack and visible in the web interface, or the provider will fail to add them to the host
	// aggregate.
	Hosts pulumi.StringArrayOutput `pulumi:"hosts"`
	// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
	// The name of the Host Aggregate
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the Availability Zone to use. If ommited, it will take the default
	// availability zone.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewAggregateV2 registers a new resource with the given unique name, arguments, and options.
func NewAggregateV2(ctx *pulumi.Context,
	name string, args *AggregateV2Args, opts ...pulumi.ResourceOption) (*AggregateV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	var resource AggregateV2
	err := ctx.RegisterResource("openstack:compute/aggregateV2:AggregateV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAggregateV2 gets an existing AggregateV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAggregateV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AggregateV2State, opts ...pulumi.ResourceOption) (*AggregateV2, error) {
	var resource AggregateV2
	err := ctx.ReadResource("openstack:compute/aggregateV2:AggregateV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AggregateV2 resources.
type aggregateV2State struct {
	// The list of hosts contained in the Host Aggregate. The hosts must be added
	// to Openstack and visible in the web interface, or the provider will fail to add them to the host
	// aggregate.
	Hosts []string `pulumi:"hosts"`
	// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
	Metadata map[string]string `pulumi:"metadata"`
	// The name of the Host Aggregate
	Name *string `pulumi:"name"`
	// The name of the Availability Zone to use. If ommited, it will take the default
	// availability zone.
	Zone *string `pulumi:"zone"`
}

type AggregateV2State struct {
	// The list of hosts contained in the Host Aggregate. The hosts must be added
	// to Openstack and visible in the web interface, or the provider will fail to add them to the host
	// aggregate.
	Hosts pulumi.StringArrayInput
	// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
	Metadata pulumi.StringMapInput
	// The name of the Host Aggregate
	Name pulumi.StringPtrInput
	// The name of the Availability Zone to use. If ommited, it will take the default
	// availability zone.
	Zone pulumi.StringPtrInput
}

func (AggregateV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*aggregateV2State)(nil)).Elem()
}

type aggregateV2Args struct {
	// The list of hosts contained in the Host Aggregate. The hosts must be added
	// to Openstack and visible in the web interface, or the provider will fail to add them to the host
	// aggregate.
	Hosts []string `pulumi:"hosts"`
	// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
	Metadata map[string]string `pulumi:"metadata"`
	// The name of the Host Aggregate
	Name *string `pulumi:"name"`
	// The name of the Availability Zone to use. If ommited, it will take the default
	// availability zone.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a AggregateV2 resource.
type AggregateV2Args struct {
	// The list of hosts contained in the Host Aggregate. The hosts must be added
	// to Openstack and visible in the web interface, or the provider will fail to add them to the host
	// aggregate.
	Hosts pulumi.StringArrayInput
	// The metadata of the Host Aggregate. Can be useful to indicate scheduler hints.
	Metadata pulumi.StringMapInput
	// The name of the Host Aggregate
	Name pulumi.StringPtrInput
	// The name of the Availability Zone to use. If ommited, it will take the default
	// availability zone.
	Zone pulumi.StringInput
}

func (AggregateV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*aggregateV2Args)(nil)).Elem()
}

type AggregateV2Input interface {
	pulumi.Input

	ToAggregateV2Output() AggregateV2Output
	ToAggregateV2OutputWithContext(ctx context.Context) AggregateV2Output
}

func (AggregateV2) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregateV2)(nil)).Elem()
}

func (i AggregateV2) ToAggregateV2Output() AggregateV2Output {
	return i.ToAggregateV2OutputWithContext(context.Background())
}

func (i AggregateV2) ToAggregateV2OutputWithContext(ctx context.Context) AggregateV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(AggregateV2Output)
}

type AggregateV2Output struct {
	*pulumi.OutputState
}

func (AggregateV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*AggregateV2Output)(nil)).Elem()
}

func (o AggregateV2Output) ToAggregateV2Output() AggregateV2Output {
	return o
}

func (o AggregateV2Output) ToAggregateV2OutputWithContext(ctx context.Context) AggregateV2Output {
	return o
}

func init() {
	pulumi.RegisterOutputType(AggregateV2Output{})
}
