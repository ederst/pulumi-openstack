// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package compute

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a project access for flavor V2 resource within OpenStack.
// 
// Note: You _must_ have admin privileges in your OpenStack cloud to use
// this resource.
// 
// ---
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/compute_flavor_access_v2.html.markdown.
type FlavorAccess struct {
	s *pulumi.ResourceState
}

// NewFlavorAccess registers a new resource with the given unique name, arguments, and options.
func NewFlavorAccess(ctx *pulumi.Context,
	name string, args *FlavorAccessArgs, opts ...pulumi.ResourceOpt) (*FlavorAccess, error) {
	if args == nil || args.FlavorId == nil {
		return nil, errors.New("missing required argument 'FlavorId'")
	}
	if args == nil || args.TenantId == nil {
		return nil, errors.New("missing required argument 'TenantId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["flavorId"] = nil
		inputs["region"] = nil
		inputs["tenantId"] = nil
	} else {
		inputs["flavorId"] = args.FlavorId
		inputs["region"] = args.Region
		inputs["tenantId"] = args.TenantId
	}
	s, err := ctx.RegisterResource("openstack:compute/flavorAccess:FlavorAccess", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FlavorAccess{s: s}, nil
}

// GetFlavorAccess gets an existing FlavorAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlavorAccess(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FlavorAccessState, opts ...pulumi.ResourceOpt) (*FlavorAccess, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["flavorId"] = state.FlavorId
		inputs["region"] = state.Region
		inputs["tenantId"] = state.TenantId
	}
	s, err := ctx.ReadResource("openstack:compute/flavorAccess:FlavorAccess", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FlavorAccess{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *FlavorAccess) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *FlavorAccess) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The UUID of flavor to use. Changing this creates a new flavor access.
func (r *FlavorAccess) FlavorId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["flavorId"])
}

// The region in which to obtain the V2 Compute client.
// If omitted, the `region` argument of the provider is used.
// Changing this creates a new flavor access.
func (r *FlavorAccess) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The UUID of tenant which is allowed to use the flavor.
// Changing this creates a new flavor access.
func (r *FlavorAccess) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// Input properties used for looking up and filtering FlavorAccess resources.
type FlavorAccessState struct {
	// The UUID of flavor to use. Changing this creates a new flavor access.
	FlavorId interface{}
	// The region in which to obtain the V2 Compute client.
	// If omitted, the `region` argument of the provider is used.
	// Changing this creates a new flavor access.
	Region interface{}
	// The UUID of tenant which is allowed to use the flavor.
	// Changing this creates a new flavor access.
	TenantId interface{}
}

// The set of arguments for constructing a FlavorAccess resource.
type FlavorAccessArgs struct {
	// The UUID of flavor to use. Changing this creates a new flavor access.
	FlavorId interface{}
	// The region in which to obtain the V2 Compute client.
	// If omitted, the `region` argument of the provider is used.
	// Changing this creates a new flavor access.
	Region interface{}
	// The UUID of tenant which is allowed to use the flavor.
	// Changing this creates a new flavor access.
	TenantId interface{}
}
