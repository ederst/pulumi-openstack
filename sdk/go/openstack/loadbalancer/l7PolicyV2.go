// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Load Balancer L7 Policy resource within OpenStack.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/lb_l7policy_v2.html.markdown.
type L7PolicyV2 struct {
	s *pulumi.ResourceState
}

// NewL7PolicyV2 registers a new resource with the given unique name, arguments, and options.
func NewL7PolicyV2(ctx *pulumi.Context,
	name string, args *L7PolicyV2Args, opts ...pulumi.ResourceOpt) (*L7PolicyV2, error) {
	if args == nil || args.Action == nil {
		return nil, errors.New("missing required argument 'Action'")
	}
	if args == nil || args.ListenerId == nil {
		return nil, errors.New("missing required argument 'ListenerId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["action"] = nil
		inputs["adminStateUp"] = nil
		inputs["description"] = nil
		inputs["listenerId"] = nil
		inputs["name"] = nil
		inputs["position"] = nil
		inputs["redirectPoolId"] = nil
		inputs["redirectUrl"] = nil
		inputs["region"] = nil
		inputs["tenantId"] = nil
	} else {
		inputs["action"] = args.Action
		inputs["adminStateUp"] = args.AdminStateUp
		inputs["description"] = args.Description
		inputs["listenerId"] = args.ListenerId
		inputs["name"] = args.Name
		inputs["position"] = args.Position
		inputs["redirectPoolId"] = args.RedirectPoolId
		inputs["redirectUrl"] = args.RedirectUrl
		inputs["region"] = args.Region
		inputs["tenantId"] = args.TenantId
	}
	s, err := ctx.RegisterResource("openstack:loadbalancer/l7PolicyV2:L7PolicyV2", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &L7PolicyV2{s: s}, nil
}

// GetL7PolicyV2 gets an existing L7PolicyV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetL7PolicyV2(ctx *pulumi.Context,
	name string, id pulumi.ID, state *L7PolicyV2State, opts ...pulumi.ResourceOpt) (*L7PolicyV2, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["action"] = state.Action
		inputs["adminStateUp"] = state.AdminStateUp
		inputs["description"] = state.Description
		inputs["listenerId"] = state.ListenerId
		inputs["name"] = state.Name
		inputs["position"] = state.Position
		inputs["redirectPoolId"] = state.RedirectPoolId
		inputs["redirectUrl"] = state.RedirectUrl
		inputs["region"] = state.Region
		inputs["tenantId"] = state.TenantId
	}
	s, err := ctx.ReadResource("openstack:loadbalancer/l7PolicyV2:L7PolicyV2", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &L7PolicyV2{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *L7PolicyV2) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *L7PolicyV2) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The L7 Policy action - can either be REDIRECT\_TO\_POOL,
// REDIRECT\_TO\_URL or REJECT.
func (r *L7PolicyV2) Action() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["action"])
}

// The administrative state of the L7 Policy.
// A valid value is true (UP) or false (DOWN).
func (r *L7PolicyV2) AdminStateUp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["adminStateUp"])
}

// Human-readable description for the L7 Policy.
func (r *L7PolicyV2) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The Listener on which the L7 Policy will be associated with.
// Changing this creates a new L7 Policy.
func (r *L7PolicyV2) ListenerId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["listenerId"])
}

// Human-readable name for the L7 Policy. Does not have
// to be unique.
func (r *L7PolicyV2) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The position of this policy on the listener. Positions start at 1.
func (r *L7PolicyV2) Position() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["position"])
}

// Requests matching this policy will be redirected to the
// pool with this ID. Only valid if action is REDIRECT\_TO\_POOL.
func (r *L7PolicyV2) RedirectPoolId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["redirectPoolId"])
}

// Requests matching this policy will be redirected to this URL.
// Only valid if action is REDIRECT\_TO\_URL.
func (r *L7PolicyV2) RedirectUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["redirectUrl"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create an . If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// L7 Policy.
func (r *L7PolicyV2) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Required for admins. The UUID of the tenant who owns
// the L7 Policy.  Only administrative users can specify a tenant UUID
// other than their own. Changing this creates a new L7 Policy.
func (r *L7PolicyV2) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// Input properties used for looking up and filtering L7PolicyV2 resources.
type L7PolicyV2State struct {
	// The L7 Policy action - can either be REDIRECT\_TO\_POOL,
	// REDIRECT\_TO\_URL or REJECT.
	Action interface{}
	// The administrative state of the L7 Policy.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp interface{}
	// Human-readable description for the L7 Policy.
	Description interface{}
	// The Listener on which the L7 Policy will be associated with.
	// Changing this creates a new L7 Policy.
	ListenerId interface{}
	// Human-readable name for the L7 Policy. Does not have
	// to be unique.
	Name interface{}
	// The position of this policy on the listener. Positions start at 1.
	Position interface{}
	// Requests matching this policy will be redirected to the
	// pool with this ID. Only valid if action is REDIRECT\_TO\_POOL.
	RedirectPoolId interface{}
	// Requests matching this policy will be redirected to this URL.
	// Only valid if action is REDIRECT\_TO\_URL.
	RedirectUrl interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// L7 Policy.
	Region interface{}
	// Required for admins. The UUID of the tenant who owns
	// the L7 Policy.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new L7 Policy.
	TenantId interface{}
}

// The set of arguments for constructing a L7PolicyV2 resource.
type L7PolicyV2Args struct {
	// The L7 Policy action - can either be REDIRECT\_TO\_POOL,
	// REDIRECT\_TO\_URL or REJECT.
	Action interface{}
	// The administrative state of the L7 Policy.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp interface{}
	// Human-readable description for the L7 Policy.
	Description interface{}
	// The Listener on which the L7 Policy will be associated with.
	// Changing this creates a new L7 Policy.
	ListenerId interface{}
	// Human-readable name for the L7 Policy. Does not have
	// to be unique.
	Name interface{}
	// The position of this policy on the listener. Positions start at 1.
	Position interface{}
	// Requests matching this policy will be redirected to the
	// pool with this ID. Only valid if action is REDIRECT\_TO\_POOL.
	RedirectPoolId interface{}
	// Requests matching this policy will be redirected to this URL.
	// Only valid if action is REDIRECT\_TO\_URL.
	RedirectUrl interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// L7 Policy.
	Region interface{}
	// Required for admins. The UUID of the tenant who owns
	// the L7 Policy.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new L7 Policy.
	TenantId interface{}
}
