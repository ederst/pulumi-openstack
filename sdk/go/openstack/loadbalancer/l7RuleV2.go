// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package loadbalancer

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 L7 Rule resource within OpenStack.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/lb_l7rule_v2.html.markdown.
type L7RuleV2 struct {
	s *pulumi.ResourceState
}

// NewL7RuleV2 registers a new resource with the given unique name, arguments, and options.
func NewL7RuleV2(ctx *pulumi.Context,
	name string, args *L7RuleV2Args, opts ...pulumi.ResourceOpt) (*L7RuleV2, error) {
	if args == nil || args.CompareType == nil {
		return nil, errors.New("missing required argument 'CompareType'")
	}
	if args == nil || args.L7policyId == nil {
		return nil, errors.New("missing required argument 'L7policyId'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["adminStateUp"] = nil
		inputs["compareType"] = nil
		inputs["invert"] = nil
		inputs["key"] = nil
		inputs["l7policyId"] = nil
		inputs["region"] = nil
		inputs["tenantId"] = nil
		inputs["type"] = nil
		inputs["value"] = nil
	} else {
		inputs["adminStateUp"] = args.AdminStateUp
		inputs["compareType"] = args.CompareType
		inputs["invert"] = args.Invert
		inputs["key"] = args.Key
		inputs["l7policyId"] = args.L7policyId
		inputs["region"] = args.Region
		inputs["tenantId"] = args.TenantId
		inputs["type"] = args.Type
		inputs["value"] = args.Value
	}
	inputs["listenerId"] = nil
	s, err := ctx.RegisterResource("openstack:loadbalancer/l7RuleV2:L7RuleV2", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &L7RuleV2{s: s}, nil
}

// GetL7RuleV2 gets an existing L7RuleV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetL7RuleV2(ctx *pulumi.Context,
	name string, id pulumi.ID, state *L7RuleV2State, opts ...pulumi.ResourceOpt) (*L7RuleV2, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["adminStateUp"] = state.AdminStateUp
		inputs["compareType"] = state.CompareType
		inputs["invert"] = state.Invert
		inputs["key"] = state.Key
		inputs["l7policyId"] = state.L7policyId
		inputs["listenerId"] = state.ListenerId
		inputs["region"] = state.Region
		inputs["tenantId"] = state.TenantId
		inputs["type"] = state.Type
		inputs["value"] = state.Value
	}
	s, err := ctx.ReadResource("openstack:loadbalancer/l7RuleV2:L7RuleV2", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &L7RuleV2{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *L7RuleV2) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *L7RuleV2) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The administrative state of the L7 Rule.
// A valid value is true (UP) or false (DOWN).
func (r *L7RuleV2) AdminStateUp() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["adminStateUp"])
}

// The comparison type for the L7 rule - can either be
// CONTAINS, STARTS\_WITH, ENDS_WITH, EQUAL_TO or REGEX
func (r *L7RuleV2) CompareType() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["compareType"])
}

// When true the logic of the rule is inverted. For example, with invert
// true, equal to would become not equal to. Default is false.
func (r *L7RuleV2) Invert() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["invert"])
}

// The key to use for the comparison. For example, the name of the cookie to
// evaluate. Valid when `type` is set to COOKIE or HEADER.
func (r *L7RuleV2) Key() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["key"])
}

// The ID of the L7 Policy to query. Changing this creates a new
// L7 Rule.
func (r *L7RuleV2) L7policyId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["l7policyId"])
}

// The ID of the Listener owning this resource.
func (r *L7RuleV2) ListenerId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["listenerId"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create an . If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// L7 Rule.
func (r *L7RuleV2) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// Required for admins. The UUID of the tenant who owns
// the L7 Rule.  Only administrative users can specify a tenant UUID
// other than their own. Changing this creates a new L7 Rule.
func (r *L7RuleV2) TenantId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["tenantId"])
}

// The L7 Rule type - can either be COOKIE, FILE\_TYPE, HEADER,
// HOST\_NAME or PATH.
func (r *L7RuleV2) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// The value to use for the comparison. For example, the file type to
// compare.
func (r *L7RuleV2) Value() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["value"])
}

// Input properties used for looking up and filtering L7RuleV2 resources.
type L7RuleV2State struct {
	// The administrative state of the L7 Rule.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp interface{}
	// The comparison type for the L7 rule - can either be
	// CONTAINS, STARTS\_WITH, ENDS_WITH, EQUAL_TO or REGEX
	CompareType interface{}
	// When true the logic of the rule is inverted. For example, with invert
	// true, equal to would become not equal to. Default is false.
	Invert interface{}
	// The key to use for the comparison. For example, the name of the cookie to
	// evaluate. Valid when `type` is set to COOKIE or HEADER.
	Key interface{}
	// The ID of the L7 Policy to query. Changing this creates a new
	// L7 Rule.
	L7policyId interface{}
	// The ID of the Listener owning this resource.
	ListenerId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// L7 Rule.
	Region interface{}
	// Required for admins. The UUID of the tenant who owns
	// the L7 Rule.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new L7 Rule.
	TenantId interface{}
	// The L7 Rule type - can either be COOKIE, FILE\_TYPE, HEADER,
	// HOST\_NAME or PATH.
	Type interface{}
	// The value to use for the comparison. For example, the file type to
	// compare.
	Value interface{}
}

// The set of arguments for constructing a L7RuleV2 resource.
type L7RuleV2Args struct {
	// The administrative state of the L7 Rule.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp interface{}
	// The comparison type for the L7 rule - can either be
	// CONTAINS, STARTS\_WITH, ENDS_WITH, EQUAL_TO or REGEX
	CompareType interface{}
	// When true the logic of the rule is inverted. For example, with invert
	// true, equal to would become not equal to. Default is false.
	Invert interface{}
	// The key to use for the comparison. For example, the name of the cookie to
	// evaluate. Valid when `type` is set to COOKIE or HEADER.
	Key interface{}
	// The ID of the L7 Policy to query. Changing this creates a new
	// L7 Rule.
	L7policyId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create an . If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// L7 Rule.
	Region interface{}
	// Required for admins. The UUID of the tenant who owns
	// the L7 Rule.  Only administrative users can specify a tenant UUID
	// other than their own. Changing this creates a new L7 Rule.
	TenantId interface{}
	// The L7 Rule type - can either be COOKIE, FILE\_TYPE, HEADER,
	// HOST\_NAME or PATH.
	Type interface{}
	// The value to use for the comparison. For example, the file type to
	// compare.
	Value interface{}
}
