// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a V3 group resource within OpenStack Keystone.
//
// Note: You _must_ have admin privileges in your OpenStack cloud to use
// this resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/identity"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := identity.NewGroupV3(ctx, "group1", &identity.GroupV3Args{
// 			Description: pulumi.String("group 1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// groups can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import openstack:identity/groupV3:GroupV3 group_1 89c60255-9bd6-460c-822a-e2b959ede9d2
// ```
type GroupV3 struct {
	pulumi.CustomResourceState

	// A description of the group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The domain the group belongs to.
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// The name of the group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new group.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewGroupV3 registers a new resource with the given unique name, arguments, and options.
func NewGroupV3(ctx *pulumi.Context,
	name string, args *GroupV3Args, opts ...pulumi.ResourceOption) (*GroupV3, error) {
	if args == nil {
		args = &GroupV3Args{}
	}
	var resource GroupV3
	err := ctx.RegisterResource("openstack:identity/groupV3:GroupV3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupV3 gets an existing GroupV3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupV3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupV3State, opts ...pulumi.ResourceOption) (*GroupV3, error) {
	var resource GroupV3
	err := ctx.ReadResource("openstack:identity/groupV3:GroupV3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupV3 resources.
type groupV3State struct {
	// A description of the group.
	Description *string `pulumi:"description"`
	// The domain the group belongs to.
	DomainId *string `pulumi:"domainId"`
	// The name of the group.
	Name *string `pulumi:"name"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new group.
	Region *string `pulumi:"region"`
}

type GroupV3State struct {
	// A description of the group.
	Description pulumi.StringPtrInput
	// The domain the group belongs to.
	DomainId pulumi.StringPtrInput
	// The name of the group.
	Name pulumi.StringPtrInput
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new group.
	Region pulumi.StringPtrInput
}

func (GroupV3State) ElementType() reflect.Type {
	return reflect.TypeOf((*groupV3State)(nil)).Elem()
}

type groupV3Args struct {
	// A description of the group.
	Description *string `pulumi:"description"`
	// The domain the group belongs to.
	DomainId *string `pulumi:"domainId"`
	// The name of the group.
	Name *string `pulumi:"name"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new group.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a GroupV3 resource.
type GroupV3Args struct {
	// A description of the group.
	Description pulumi.StringPtrInput
	// The domain the group belongs to.
	DomainId pulumi.StringPtrInput
	// The name of the group.
	Name pulumi.StringPtrInput
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new group.
	Region pulumi.StringPtrInput
}

func (GroupV3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*groupV3Args)(nil)).Elem()
}

type GroupV3Input interface {
	pulumi.Input

	ToGroupV3Output() GroupV3Output
	ToGroupV3OutputWithContext(ctx context.Context) GroupV3Output
}

func (GroupV3) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupV3)(nil)).Elem()
}

func (i GroupV3) ToGroupV3Output() GroupV3Output {
	return i.ToGroupV3OutputWithContext(context.Background())
}

func (i GroupV3) ToGroupV3OutputWithContext(ctx context.Context) GroupV3Output {
	return pulumi.ToOutputWithContext(ctx, i).(GroupV3Output)
}

type GroupV3Output struct {
	*pulumi.OutputState
}

func (GroupV3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupV3Output)(nil)).Elem()
}

func (o GroupV3Output) ToGroupV3Output() GroupV3Output {
	return o
}

func (o GroupV3Output) ToGroupV3OutputWithContext(ctx context.Context) GroupV3Output {
	return o
}

func init() {
	pulumi.RegisterOutputType(GroupV3Output{})
}
