// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a V3 EC2 Credential resource within OpenStack Keystone.
// EC2 credentials in OpenStack are used to access S3 compatible Swift/RadosGW
// endpoints or to authenticate against Keystone.
//
// > **Note:** All arguments including the EC2 credential access key and secret
// will be stored in the raw state as plain-text. [Read more about sensitive data
// in state](https://www.terraform.io/docs/state/sensitive-data.html).
//
// ## Example Usage
// ### EC2 credential in current project scope
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/identity"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := identity.NewEc2CredentialV3(ctx, "ec2Key1", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### EC2 credential in pre-defined project scope
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/identity"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := identity.NewEc2CredentialV3(ctx, "ec2Key1", &identity.Ec2CredentialV3Args{
// 			ProjectId: pulumi.String("f7ac731cc11f40efbc03a9f9e1d1d21f"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Ec2CredentialV3 struct {
	pulumi.CustomResourceState

	// contains an EC2 credential access UUID
	Access pulumi.StringOutput `pulumi:"access"`
	// The ID of the project the EC2 credential is created
	// for and that authentication requests using this EC2 credential will
	// be scoped to.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new EC2 credential.
	Region pulumi.StringOutput `pulumi:"region"`
	// contains an EC2 credential secret UUID
	Secret pulumi.StringOutput `pulumi:"secret"`
	// contains an EC2 credential trust ID scope
	TrustId pulumi.StringOutput `pulumi:"trustId"`
	// The ID of the user the EC2 credential is created for.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewEc2CredentialV3 registers a new resource with the given unique name, arguments, and options.
func NewEc2CredentialV3(ctx *pulumi.Context,
	name string, args *Ec2CredentialV3Args, opts ...pulumi.ResourceOption) (*Ec2CredentialV3, error) {
	if args == nil {
		args = &Ec2CredentialV3Args{}
	}
	var resource Ec2CredentialV3
	err := ctx.RegisterResource("openstack:identity/ec2CredentialV3:Ec2CredentialV3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEc2CredentialV3 gets an existing Ec2CredentialV3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEc2CredentialV3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ec2CredentialV3State, opts ...pulumi.ResourceOption) (*Ec2CredentialV3, error) {
	var resource Ec2CredentialV3
	err := ctx.ReadResource("openstack:identity/ec2CredentialV3:Ec2CredentialV3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ec2CredentialV3 resources.
type ec2CredentialV3State struct {
	// contains an EC2 credential access UUID
	Access *string `pulumi:"access"`
	// The ID of the project the EC2 credential is created
	// for and that authentication requests using this EC2 credential will
	// be scoped to.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new EC2 credential.
	Region *string `pulumi:"region"`
	// contains an EC2 credential secret UUID
	Secret *string `pulumi:"secret"`
	// contains an EC2 credential trust ID scope
	TrustId *string `pulumi:"trustId"`
	// The ID of the user the EC2 credential is created for.
	UserId *string `pulumi:"userId"`
}

type Ec2CredentialV3State struct {
	// contains an EC2 credential access UUID
	Access pulumi.StringPtrInput
	// The ID of the project the EC2 credential is created
	// for and that authentication requests using this EC2 credential will
	// be scoped to.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new EC2 credential.
	Region pulumi.StringPtrInput
	// contains an EC2 credential secret UUID
	Secret pulumi.StringPtrInput
	// contains an EC2 credential trust ID scope
	TrustId pulumi.StringPtrInput
	// The ID of the user the EC2 credential is created for.
	UserId pulumi.StringPtrInput
}

func (Ec2CredentialV3State) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2CredentialV3State)(nil)).Elem()
}

type ec2CredentialV3Args struct {
	// The ID of the project the EC2 credential is created
	// for and that authentication requests using this EC2 credential will
	// be scoped to.
	ProjectId *string `pulumi:"projectId"`
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new EC2 credential.
	Region *string `pulumi:"region"`
	// The ID of the user the EC2 credential is created for.
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a Ec2CredentialV3 resource.
type Ec2CredentialV3Args struct {
	// The ID of the project the EC2 credential is created
	// for and that authentication requests using this EC2 credential will
	// be scoped to.
	ProjectId pulumi.StringPtrInput
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new EC2 credential.
	Region pulumi.StringPtrInput
	// The ID of the user the EC2 credential is created for.
	UserId pulumi.StringPtrInput
}

func (Ec2CredentialV3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ec2CredentialV3Args)(nil)).Elem()
}
