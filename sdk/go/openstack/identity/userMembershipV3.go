// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a user membership to group V3 resource within OpenStack.
//
// Note: You _must_ have admin privileges in your OpenStack cloud to use
// this resource.
//
// ***
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-openstack/sdk/v2/go/openstack/identity"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		project1, err := identity.NewProject(ctx, "project1", nil)
// 		if err != nil {
// 			return err
// 		}
// 		user1, err := identity.NewUser(ctx, "user1", &identity.UserArgs{
// 			DefaultProjectId: project1.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		group1, err := identity.NewGroupV3(ctx, "group1", &identity.GroupV3Args{
// 			Description: pulumi.String("group 1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		role1, err := identity.NewRole(ctx, "role1", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = identity.NewUserMembershipV3(ctx, "userMembership1", &identity.UserMembershipV3Args{
// 			GroupId: group1.ID(),
// 			UserId:  user1.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = identity.NewRoleAssignment(ctx, "roleAssignment1", &identity.RoleAssignmentArgs{
// 			GroupId:   group1.ID(),
// 			ProjectId: project1.ID(),
// 			RoleId:    role1.ID(),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported by specifying all two arguments, separated by a forward slash
//
// ```sh
//  $ pulumi import openstack:identity/userMembershipV3:UserMembershipV3 user_membership_1 <user_id>/<group_id>
// ```
type UserMembershipV3 struct {
	pulumi.CustomResourceState

	// The UUID of group to which the user will be added.
	// Changing this creates a new user membership.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The region in which to obtain the V3 Identity client.
	// If omitted, the `region` argument of the provider is used.
	// Changing this creates a new user membership.
	Region pulumi.StringOutput `pulumi:"region"`
	// The UUID of user to use. Changing this creates a new user membership.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewUserMembershipV3 registers a new resource with the given unique name, arguments, and options.
func NewUserMembershipV3(ctx *pulumi.Context,
	name string, args *UserMembershipV3Args, opts ...pulumi.ResourceOption) (*UserMembershipV3, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	var resource UserMembershipV3
	err := ctx.RegisterResource("openstack:identity/userMembershipV3:UserMembershipV3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserMembershipV3 gets an existing UserMembershipV3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserMembershipV3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserMembershipV3State, opts ...pulumi.ResourceOption) (*UserMembershipV3, error) {
	var resource UserMembershipV3
	err := ctx.ReadResource("openstack:identity/userMembershipV3:UserMembershipV3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserMembershipV3 resources.
type userMembershipV3State struct {
	// The UUID of group to which the user will be added.
	// Changing this creates a new user membership.
	GroupId *string `pulumi:"groupId"`
	// The region in which to obtain the V3 Identity client.
	// If omitted, the `region` argument of the provider is used.
	// Changing this creates a new user membership.
	Region *string `pulumi:"region"`
	// The UUID of user to use. Changing this creates a new user membership.
	UserId *string `pulumi:"userId"`
}

type UserMembershipV3State struct {
	// The UUID of group to which the user will be added.
	// Changing this creates a new user membership.
	GroupId pulumi.StringPtrInput
	// The region in which to obtain the V3 Identity client.
	// If omitted, the `region` argument of the provider is used.
	// Changing this creates a new user membership.
	Region pulumi.StringPtrInput
	// The UUID of user to use. Changing this creates a new user membership.
	UserId pulumi.StringPtrInput
}

func (UserMembershipV3State) ElementType() reflect.Type {
	return reflect.TypeOf((*userMembershipV3State)(nil)).Elem()
}

type userMembershipV3Args struct {
	// The UUID of group to which the user will be added.
	// Changing this creates a new user membership.
	GroupId string `pulumi:"groupId"`
	// The region in which to obtain the V3 Identity client.
	// If omitted, the `region` argument of the provider is used.
	// Changing this creates a new user membership.
	Region *string `pulumi:"region"`
	// The UUID of user to use. Changing this creates a new user membership.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a UserMembershipV3 resource.
type UserMembershipV3Args struct {
	// The UUID of group to which the user will be added.
	// Changing this creates a new user membership.
	GroupId pulumi.StringInput
	// The region in which to obtain the V3 Identity client.
	// If omitted, the `region` argument of the provider is used.
	// Changing this creates a new user membership.
	Region pulumi.StringPtrInput
	// The UUID of user to use. Changing this creates a new user membership.
	UserId pulumi.StringInput
}

func (UserMembershipV3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*userMembershipV3Args)(nil)).Elem()
}

type UserMembershipV3Input interface {
	pulumi.Input

	ToUserMembershipV3Output() UserMembershipV3Output
	ToUserMembershipV3OutputWithContext(ctx context.Context) UserMembershipV3Output
}

func (*UserMembershipV3) ElementType() reflect.Type {
	return reflect.TypeOf((*UserMembershipV3)(nil))
}

func (i *UserMembershipV3) ToUserMembershipV3Output() UserMembershipV3Output {
	return i.ToUserMembershipV3OutputWithContext(context.Background())
}

func (i *UserMembershipV3) ToUserMembershipV3OutputWithContext(ctx context.Context) UserMembershipV3Output {
	return pulumi.ToOutputWithContext(ctx, i).(UserMembershipV3Output)
}

type UserMembershipV3Output struct {
	*pulumi.OutputState
}

func (UserMembershipV3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*UserMembershipV3)(nil))
}

func (o UserMembershipV3Output) ToUserMembershipV3Output() UserMembershipV3Output {
	return o
}

func (o UserMembershipV3Output) ToUserMembershipV3OutputWithContext(ctx context.Context) UserMembershipV3Output {
	return o
}

func init() {
	pulumi.RegisterOutputType(UserMembershipV3Output{})
}
