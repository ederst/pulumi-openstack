// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V3 Application Credential resource within OpenStack Keystone.
// 
// > **Note:** All arguments including the application credential name and secret
// will be stored in the raw state as plain-text. [Read more about sensitive data
// in state](https://www.terraform.io/docs/state/sensitive-data.html).
// 
// > **Note:** An Application Credential is created within the authenticated user
// project scope and is not visible by an admin or other accounts.
// The Application Credential visibility is similar to
// `compute.Keypair`.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/identity_application_credential_v3.html.markdown.
type ApplicationCredential struct {
	s *pulumi.ResourceState
}

// NewApplicationCredential registers a new resource with the given unique name, arguments, and options.
func NewApplicationCredential(ctx *pulumi.Context,
	name string, args *ApplicationCredentialArgs, opts ...pulumi.ResourceOpt) (*ApplicationCredential, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["expiresAt"] = nil
		inputs["name"] = nil
		inputs["region"] = nil
		inputs["roles"] = nil
		inputs["secret"] = nil
		inputs["unrestricted"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["expiresAt"] = args.ExpiresAt
		inputs["name"] = args.Name
		inputs["region"] = args.Region
		inputs["roles"] = args.Roles
		inputs["secret"] = args.Secret
		inputs["unrestricted"] = args.Unrestricted
	}
	inputs["projectId"] = nil
	s, err := ctx.RegisterResource("openstack:identity/applicationCredential:ApplicationCredential", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ApplicationCredential{s: s}, nil
}

// GetApplicationCredential gets an existing ApplicationCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationCredential(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ApplicationCredentialState, opts ...pulumi.ResourceOpt) (*ApplicationCredential, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["expiresAt"] = state.ExpiresAt
		inputs["name"] = state.Name
		inputs["projectId"] = state.ProjectId
		inputs["region"] = state.Region
		inputs["roles"] = state.Roles
		inputs["secret"] = state.Secret
		inputs["unrestricted"] = state.Unrestricted
	}
	s, err := ctx.ReadResource("openstack:identity/applicationCredential:ApplicationCredential", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ApplicationCredential{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ApplicationCredential) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ApplicationCredential) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A description of the application credential.
// Changing this creates a new application credential.
func (r *ApplicationCredential) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The expiration time of the application credential
// in the RFC3339 timestamp format (e.g. `2019-03-09T12:58:49Z`). If omitted,
// an application credential will never expire. Changing this creates a new
// application credential.
func (r *ApplicationCredential) ExpiresAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["expiresAt"])
}

// A name of the application credential. Changing this
// creates a new application credential.
func (r *ApplicationCredential) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the project the application credential was created
// for and that authentication requests using this application credential will
// be scoped to.
func (r *ApplicationCredential) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// The region in which to obtain the V3 Keystone client.
// If omitted, the `region` argument of the provider is used. Changing this
// creates a new application credential.
func (r *ApplicationCredential) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// A collection of one or more role names, which this
// application credential has to be associated with its project. If omitted,
// all the current user's roles within the scoped project will be inherited by
// a new application credential. Changing this creates a new application
// credential.
func (r *ApplicationCredential) Roles() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["roles"])
}

// The secret for the application credential. If omitted,
// it will be generated by the server. Changing this creates a new application
// credential.
func (r *ApplicationCredential) Secret() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["secret"])
}

// A flag indicating whether the application
// credential may be used for creation or destruction of other application
// credentials or trusts. Changing this creates a new application credential.
func (r *ApplicationCredential) Unrestricted() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["unrestricted"])
}

// Input properties used for looking up and filtering ApplicationCredential resources.
type ApplicationCredentialState struct {
	// A description of the application credential.
	// Changing this creates a new application credential.
	Description interface{}
	// The expiration time of the application credential
	// in the RFC3339 timestamp format (e.g. `2019-03-09T12:58:49Z`). If omitted,
	// an application credential will never expire. Changing this creates a new
	// application credential.
	ExpiresAt interface{}
	// A name of the application credential. Changing this
	// creates a new application credential.
	Name interface{}
	// The ID of the project the application credential was created
	// for and that authentication requests using this application credential will
	// be scoped to.
	ProjectId interface{}
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new application credential.
	Region interface{}
	// A collection of one or more role names, which this
	// application credential has to be associated with its project. If omitted,
	// all the current user's roles within the scoped project will be inherited by
	// a new application credential. Changing this creates a new application
	// credential.
	Roles interface{}
	// The secret for the application credential. If omitted,
	// it will be generated by the server. Changing this creates a new application
	// credential.
	Secret interface{}
	// A flag indicating whether the application
	// credential may be used for creation or destruction of other application
	// credentials or trusts. Changing this creates a new application credential.
	Unrestricted interface{}
}

// The set of arguments for constructing a ApplicationCredential resource.
type ApplicationCredentialArgs struct {
	// A description of the application credential.
	// Changing this creates a new application credential.
	Description interface{}
	// The expiration time of the application credential
	// in the RFC3339 timestamp format (e.g. `2019-03-09T12:58:49Z`). If omitted,
	// an application credential will never expire. Changing this creates a new
	// application credential.
	ExpiresAt interface{}
	// A name of the application credential. Changing this
	// creates a new application credential.
	Name interface{}
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used. Changing this
	// creates a new application credential.
	Region interface{}
	// A collection of one or more role names, which this
	// application credential has to be associated with its project. If omitted,
	// all the current user's roles within the scoped project will be inherited by
	// a new application credential. Changing this creates a new application
	// credential.
	Roles interface{}
	// The secret for the application credential. If omitted,
	// it will be generated by the server. Changing this creates a new application
	// credential.
	Secret interface{}
	// A flag indicating whether the application
	// credential may be used for creation or destruction of other application
	// credentials or trusts. Changing this creates a new application credential.
	Unrestricted interface{}
}
