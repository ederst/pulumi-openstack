// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V3 Service resource within OpenStack Keystone.
// 
// > **Note:** This usually requires admin privileges.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/identity_service_v3.html.markdown.
type ServiceV3 struct {
	s *pulumi.ResourceState
}

// NewServiceV3 registers a new resource with the given unique name, arguments, and options.
func NewServiceV3(ctx *pulumi.Context,
	name string, args *ServiceV3Args, opts ...pulumi.ResourceOpt) (*ServiceV3, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["enabled"] = nil
		inputs["name"] = nil
		inputs["region"] = nil
		inputs["type"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["enabled"] = args.Enabled
		inputs["name"] = args.Name
		inputs["region"] = args.Region
		inputs["type"] = args.Type
	}
	s, err := ctx.RegisterResource("openstack:identity/serviceV3:ServiceV3", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceV3{s: s}, nil
}

// GetServiceV3 gets an existing ServiceV3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceV3(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceV3State, opts ...pulumi.ResourceOpt) (*ServiceV3, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["enabled"] = state.Enabled
		inputs["name"] = state.Name
		inputs["region"] = state.Region
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("openstack:identity/serviceV3:ServiceV3", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ServiceV3{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ServiceV3) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ServiceV3) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The service description.
func (r *ServiceV3) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// The service status. Defaults to `true`.
func (r *ServiceV3) Enabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enabled"])
}

// The service name.
func (r *ServiceV3) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The region in which to obtain the V3 Keystone client.
// If omitted, the `region` argument of the provider is used.
func (r *ServiceV3) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The service type.
func (r *ServiceV3) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering ServiceV3 resources.
type ServiceV3State struct {
	// The service description.
	Description interface{}
	// The service status. Defaults to `true`.
	Enabled interface{}
	// The service name.
	Name interface{}
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used.
	Region interface{}
	// The service type.
	Type interface{}
}

// The set of arguments for constructing a ServiceV3 resource.
type ServiceV3Args struct {
	// The service description.
	Description interface{}
	// The service status. Defaults to `true`.
	Enabled interface{}
	// The service name.
	Name interface{}
	// The region in which to obtain the V3 Keystone client.
	// If omitted, the `region` argument of the provider is used.
	Region interface{}
	// The service type.
	Type interface{}
}
