// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package containerinfra

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V1 Magnum cluster resource within OpenStack.
// 
// ## Argument reference
// 
// The following arguments are supported:
// 
// * `region` - (Optional) The region in which to obtain the V1 Container Infra
//     client. A Container Infra client is needed to create a cluster. If omitted,
//     the `region` argument of the provider is used. Changing this creates a new
//     cluster.
// 
// * `name` - (Required) The name of the cluster. Changing this updates the name
//     of the existing cluster template.
// 
// * `project_id` - (Optional) The project of the cluster. Required if admin wants
//     to create a cluster in another project. Changing this creates a new
//     cluster.
// 
// * `user_id` - (Optional) The user of the cluster. Required if admin wants to
//     create a cluster template for another user. Changing this creates a new
//     cluster.
// 
// * `cluster_template_id` - (Required) The UUID of the V1 Container Infra cluster
//     template. Changing this creates a new cluster.
// 
// * `create_timeout` - (Optional) The timeout (in minutes) for creating the
//     cluster. Changing this creates a new cluster.
// 
// * `discovery_url` - (Optional) The URL used for cluster node discovery.
//     Changing this creates a new cluster.
// 
// * `docker_volume_size` - (Optional) The size (in GB) of the Docker volume.
//     Changing this creates a new cluster.
// 
// * `flavor` - (Optional) The flavor for the nodes of the cluster. Can be set via
//     the `OS_MAGNUM_FLAVOR` environment variable. Changing this creates a new
//     cluster.
// 
// * `master_flavor` - (Optional) The flavor for the master nodes. Can be set via
//     the `OS_MAGNUM_MASTER_FLAVOR` environment variable. Changing this creates a
//     new cluster.
// 
// * `keypair` - (Optional) The name of the Compute service SSH keypair. Changing
//     this creates a new cluster.
// 
// * `labels` - (Optional) The list of key value pairs representing additional
//     properties of the cluster. Changing this creates a new cluster.
// 
// * `master_count` - (Optional) The number of master nodes for the cluster.
//     Changing this creates a new cluster.
// 
// * `node_count` - (Optional) The number of nodes for the cluster. Changing this
//     creates a new cluster.
// 
// ## Attributes reference
// 
// The following attributes are exported:
// 
// * `region` - See Argument Reference above.
// * `name` - See Argument Reference above.
// * `project_id` - See Argument Reference above.
// * `created_at` - The time at which cluster was created.
// * `updated_at` - The time at which cluster was created.
// * `api_address` - COE API address.
// * `coe_version` - COE software version.
// * `cluster_template_id` - See Argument Reference above.
// * `container_version` - Container software version.
// * `create_timeout` - See Argument Reference above.
// * `discovery_url` - See Argument Reference above.
// * `docker_volume_size` - See Argument Reference above.
// * `flavor` - See Argument Reference above.
// * `master_flavor` - See Argument Reference above.
// * `keypair` - See Argument Reference above.
// * `labels` - See Argument Reference above.
// * `master_count` - See Argument Reference above.
// * `node_count` - See Argument Reference above.
// * `master_addresses` - IP addresses of the master node of the cluster.
// * `node_addresses` - IP addresses of the node of the cluster.
// * `stack_id` - UUID of the Orchestration service stack.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/containerinfra_cluster_v1.html.markdown.
type Cluster struct {
	s *pulumi.ResourceState
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	if args == nil || args.ClusterTemplateId == nil {
		return nil, errors.New("missing required argument 'ClusterTemplateId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["clusterTemplateId"] = nil
		inputs["createTimeout"] = nil
		inputs["discoveryUrl"] = nil
		inputs["dockerVolumeSize"] = nil
		inputs["flavor"] = nil
		inputs["keypair"] = nil
		inputs["labels"] = nil
		inputs["masterCount"] = nil
		inputs["masterFlavor"] = nil
		inputs["name"] = nil
		inputs["nodeCount"] = nil
		inputs["region"] = nil
	} else {
		inputs["clusterTemplateId"] = args.ClusterTemplateId
		inputs["createTimeout"] = args.CreateTimeout
		inputs["discoveryUrl"] = args.DiscoveryUrl
		inputs["dockerVolumeSize"] = args.DockerVolumeSize
		inputs["flavor"] = args.Flavor
		inputs["keypair"] = args.Keypair
		inputs["labels"] = args.Labels
		inputs["masterCount"] = args.MasterCount
		inputs["masterFlavor"] = args.MasterFlavor
		inputs["name"] = args.Name
		inputs["nodeCount"] = args.NodeCount
		inputs["region"] = args.Region
	}
	inputs["apiAddress"] = nil
	inputs["coeVersion"] = nil
	inputs["containerVersion"] = nil
	inputs["createdAt"] = nil
	inputs["masterAddresses"] = nil
	inputs["nodeAddresses"] = nil
	inputs["projectId"] = nil
	inputs["stackId"] = nil
	inputs["updatedAt"] = nil
	inputs["userId"] = nil
	s, err := ctx.RegisterResource("openstack:containerinfra/cluster:Cluster", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cluster{s: s}, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ClusterState, opts ...pulumi.ResourceOpt) (*Cluster, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["apiAddress"] = state.ApiAddress
		inputs["clusterTemplateId"] = state.ClusterTemplateId
		inputs["coeVersion"] = state.CoeVersion
		inputs["containerVersion"] = state.ContainerVersion
		inputs["createTimeout"] = state.CreateTimeout
		inputs["createdAt"] = state.CreatedAt
		inputs["discoveryUrl"] = state.DiscoveryUrl
		inputs["dockerVolumeSize"] = state.DockerVolumeSize
		inputs["flavor"] = state.Flavor
		inputs["keypair"] = state.Keypair
		inputs["labels"] = state.Labels
		inputs["masterAddresses"] = state.MasterAddresses
		inputs["masterCount"] = state.MasterCount
		inputs["masterFlavor"] = state.MasterFlavor
		inputs["name"] = state.Name
		inputs["nodeAddresses"] = state.NodeAddresses
		inputs["nodeCount"] = state.NodeCount
		inputs["projectId"] = state.ProjectId
		inputs["region"] = state.Region
		inputs["stackId"] = state.StackId
		inputs["updatedAt"] = state.UpdatedAt
		inputs["userId"] = state.UserId
	}
	s, err := ctx.ReadResource("openstack:containerinfra/cluster:Cluster", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Cluster{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Cluster) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Cluster) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Cluster) ApiAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["apiAddress"])
}

func (r *Cluster) ClusterTemplateId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["clusterTemplateId"])
}

func (r *Cluster) CoeVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["coeVersion"])
}

func (r *Cluster) ContainerVersion() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["containerVersion"])
}

func (r *Cluster) CreateTimeout() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["createTimeout"])
}

func (r *Cluster) CreatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createdAt"])
}

func (r *Cluster) DiscoveryUrl() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["discoveryUrl"])
}

func (r *Cluster) DockerVolumeSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["dockerVolumeSize"])
}

func (r *Cluster) Flavor() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["flavor"])
}

func (r *Cluster) Keypair() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["keypair"])
}

func (r *Cluster) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *Cluster) MasterAddresses() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["masterAddresses"])
}

func (r *Cluster) MasterCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["masterCount"])
}

func (r *Cluster) MasterFlavor() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["masterFlavor"])
}

func (r *Cluster) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Cluster) NodeAddresses() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nodeAddresses"])
}

func (r *Cluster) NodeCount() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["nodeCount"])
}

func (r *Cluster) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

func (r *Cluster) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

func (r *Cluster) StackId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["stackId"])
}

func (r *Cluster) UpdatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["updatedAt"])
}

func (r *Cluster) UserId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userId"])
}

// Input properties used for looking up and filtering Cluster resources.
type ClusterState struct {
	ApiAddress interface{}
	ClusterTemplateId interface{}
	CoeVersion interface{}
	ContainerVersion interface{}
	CreateTimeout interface{}
	CreatedAt interface{}
	DiscoveryUrl interface{}
	DockerVolumeSize interface{}
	Flavor interface{}
	Keypair interface{}
	Labels interface{}
	MasterAddresses interface{}
	MasterCount interface{}
	MasterFlavor interface{}
	Name interface{}
	NodeAddresses interface{}
	NodeCount interface{}
	ProjectId interface{}
	Region interface{}
	StackId interface{}
	UpdatedAt interface{}
	UserId interface{}
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	ClusterTemplateId interface{}
	CreateTimeout interface{}
	DiscoveryUrl interface{}
	DockerVolumeSize interface{}
	Flavor interface{}
	Keypair interface{}
	Labels interface{}
	MasterCount interface{}
	MasterFlavor interface{}
	Name interface{}
	NodeCount interface{}
	Region interface{}
}
