// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/networking_port_secgroup_associate_v2.html.markdown.
type PortSecGroupAssociate struct {
	s *pulumi.ResourceState
}

// NewPortSecGroupAssociate registers a new resource with the given unique name, arguments, and options.
func NewPortSecGroupAssociate(ctx *pulumi.Context,
	name string, args *PortSecGroupAssociateArgs, opts ...pulumi.ResourceOpt) (*PortSecGroupAssociate, error) {
	if args == nil || args.PortId == nil {
		return nil, errors.New("missing required argument 'PortId'")
	}
	if args == nil || args.SecurityGroupIds == nil {
		return nil, errors.New("missing required argument 'SecurityGroupIds'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["enforce"] = nil
		inputs["portId"] = nil
		inputs["region"] = nil
		inputs["securityGroupIds"] = nil
	} else {
		inputs["enforce"] = args.Enforce
		inputs["portId"] = args.PortId
		inputs["region"] = args.Region
		inputs["securityGroupIds"] = args.SecurityGroupIds
	}
	inputs["allSecurityGroupIds"] = nil
	s, err := ctx.RegisterResource("openstack:networking/portSecGroupAssociate:PortSecGroupAssociate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PortSecGroupAssociate{s: s}, nil
}

// GetPortSecGroupAssociate gets an existing PortSecGroupAssociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortSecGroupAssociate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PortSecGroupAssociateState, opts ...pulumi.ResourceOpt) (*PortSecGroupAssociate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allSecurityGroupIds"] = state.AllSecurityGroupIds
		inputs["enforce"] = state.Enforce
		inputs["portId"] = state.PortId
		inputs["region"] = state.Region
		inputs["securityGroupIds"] = state.SecurityGroupIds
	}
	s, err := ctx.ReadResource("openstack:networking/portSecGroupAssociate:PortSecGroupAssociate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &PortSecGroupAssociate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *PortSecGroupAssociate) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *PortSecGroupAssociate) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The collection of Security Group IDs on the port
// which have been explicitly and implicitly added.
func (r *PortSecGroupAssociate) AllSecurityGroupIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["allSecurityGroupIds"])
}

// Whether to replace or append the list of security
// groups, specified in the `securityGroupIds`. Defaults to `false`.
func (r *PortSecGroupAssociate) Enforce() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enforce"])
}

// An UUID of the port to apply security groups to.
func (r *PortSecGroupAssociate) PortId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["portId"])
}

// The region in which to obtain the V2 networking client.
// A networking client is needed to manage a port. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// resource.
func (r *PortSecGroupAssociate) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// A list of security group IDs to apply to
// the port. The security groups must be specified by ID and not name (as
// opposed to how they are configured with the Compute Instance).
func (r *PortSecGroupAssociate) SecurityGroupIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["securityGroupIds"])
}

// Input properties used for looking up and filtering PortSecGroupAssociate resources.
type PortSecGroupAssociateState struct {
	// The collection of Security Group IDs on the port
	// which have been explicitly and implicitly added.
	AllSecurityGroupIds interface{}
	// Whether to replace or append the list of security
	// groups, specified in the `securityGroupIds`. Defaults to `false`.
	Enforce interface{}
	// An UUID of the port to apply security groups to.
	PortId interface{}
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to manage a port. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// resource.
	Region interface{}
	// A list of security group IDs to apply to
	// the port. The security groups must be specified by ID and not name (as
	// opposed to how they are configured with the Compute Instance).
	SecurityGroupIds interface{}
}

// The set of arguments for constructing a PortSecGroupAssociate resource.
type PortSecGroupAssociateArgs struct {
	// Whether to replace or append the list of security
	// groups, specified in the `securityGroupIds`. Defaults to `false`.
	Enforce interface{}
	// An UUID of the port to apply security groups to.
	PortId interface{}
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to manage a port. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// resource.
	Region interface{}
	// A list of security group IDs to apply to
	// the port. The security groups must be specified by ID and not name (as
	// opposed to how they are configured with the Compute Instance).
	SecurityGroupIds interface{}
}
