// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 Neutron QoS bandwidth limit rule resource within OpenStack.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/networking_qos_bandwidth_limit_rule_v2.html.markdown.
type QosBandwidthLimitRule struct {
	s *pulumi.ResourceState
}

// NewQosBandwidthLimitRule registers a new resource with the given unique name, arguments, and options.
func NewQosBandwidthLimitRule(ctx *pulumi.Context,
	name string, args *QosBandwidthLimitRuleArgs, opts ...pulumi.ResourceOpt) (*QosBandwidthLimitRule, error) {
	if args == nil || args.MaxKbps == nil {
		return nil, errors.New("missing required argument 'MaxKbps'")
	}
	if args == nil || args.QosPolicyId == nil {
		return nil, errors.New("missing required argument 'QosPolicyId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["direction"] = nil
		inputs["maxBurstKbps"] = nil
		inputs["maxKbps"] = nil
		inputs["qosPolicyId"] = nil
		inputs["region"] = nil
	} else {
		inputs["direction"] = args.Direction
		inputs["maxBurstKbps"] = args.MaxBurstKbps
		inputs["maxKbps"] = args.MaxKbps
		inputs["qosPolicyId"] = args.QosPolicyId
		inputs["region"] = args.Region
	}
	s, err := ctx.RegisterResource("openstack:networking/qosBandwidthLimitRule:QosBandwidthLimitRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &QosBandwidthLimitRule{s: s}, nil
}

// GetQosBandwidthLimitRule gets an existing QosBandwidthLimitRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQosBandwidthLimitRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *QosBandwidthLimitRuleState, opts ...pulumi.ResourceOpt) (*QosBandwidthLimitRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["direction"] = state.Direction
		inputs["maxBurstKbps"] = state.MaxBurstKbps
		inputs["maxKbps"] = state.MaxKbps
		inputs["qosPolicyId"] = state.QosPolicyId
		inputs["region"] = state.Region
	}
	s, err := ctx.ReadResource("openstack:networking/qosBandwidthLimitRule:QosBandwidthLimitRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &QosBandwidthLimitRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *QosBandwidthLimitRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *QosBandwidthLimitRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The direction of traffic. Defaults to "egress". Changing this updates the direction of the
// existing QoS bandwidth limit rule.
func (r *QosBandwidthLimitRule) Direction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["direction"])
}

// The maximum burst size in kilobits of a QoS bandwidth limit rule. Changing this updates the
// maximum burst size in kilobits of the existing QoS bandwidth limit rule.
func (r *QosBandwidthLimitRule) MaxBurstKbps() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxBurstKbps"])
}

// The maximum kilobits per second of a QoS bandwidth limit rule. Changing this updates the
// maximum kilobits per second of the existing QoS bandwidth limit rule.
func (r *QosBandwidthLimitRule) MaxKbps() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["maxKbps"])
}

// The QoS policy reference. Changing this creates a new QoS bandwidth limit rule.
func (r *QosBandwidthLimitRule) QosPolicyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["qosPolicyId"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create a Neutron QoS bandwidth limit rule. If omitted, the
// `region` argument of the provider is used. Changing this creates a new QoS bandwidth limit rule.
func (r *QosBandwidthLimitRule) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Input properties used for looking up and filtering QosBandwidthLimitRule resources.
type QosBandwidthLimitRuleState struct {
	// The direction of traffic. Defaults to "egress". Changing this updates the direction of the
	// existing QoS bandwidth limit rule.
	Direction interface{}
	// The maximum burst size in kilobits of a QoS bandwidth limit rule. Changing this updates the
	// maximum burst size in kilobits of the existing QoS bandwidth limit rule.
	MaxBurstKbps interface{}
	// The maximum kilobits per second of a QoS bandwidth limit rule. Changing this updates the
	// maximum kilobits per second of the existing QoS bandwidth limit rule.
	MaxKbps interface{}
	// The QoS policy reference. Changing this creates a new QoS bandwidth limit rule.
	QosPolicyId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron QoS bandwidth limit rule. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new QoS bandwidth limit rule.
	Region interface{}
}

// The set of arguments for constructing a QosBandwidthLimitRule resource.
type QosBandwidthLimitRuleArgs struct {
	// The direction of traffic. Defaults to "egress". Changing this updates the direction of the
	// existing QoS bandwidth limit rule.
	Direction interface{}
	// The maximum burst size in kilobits of a QoS bandwidth limit rule. Changing this updates the
	// maximum burst size in kilobits of the existing QoS bandwidth limit rule.
	MaxBurstKbps interface{}
	// The maximum kilobits per second of a QoS bandwidth limit rule. Changing this updates the
	// maximum kilobits per second of the existing QoS bandwidth limit rule.
	MaxKbps interface{}
	// The QoS policy reference. Changing this creates a new QoS bandwidth limit rule.
	QosPolicyId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron QoS bandwidth limit rule. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new QoS bandwidth limit rule.
	Region interface{}
}
