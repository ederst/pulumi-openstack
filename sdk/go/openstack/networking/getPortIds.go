// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this data source to get a list of Openstack Port IDs matching the
// specified criteria.
func LookupPortIds(ctx *pulumi.Context, args *GetPortIdsArgs) (*GetPortIdsResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["adminStateUp"] = args.AdminStateUp
		inputs["description"] = args.Description
		inputs["deviceId"] = args.DeviceId
		inputs["deviceOwner"] = args.DeviceOwner
		inputs["fixedIp"] = args.FixedIp
		inputs["macAddress"] = args.MacAddress
		inputs["name"] = args.Name
		inputs["networkId"] = args.NetworkId
		inputs["projectId"] = args.ProjectId
		inputs["region"] = args.Region
		inputs["securityGroupIds"] = args.SecurityGroupIds
		inputs["sortDirection"] = args.SortDirection
		inputs["sortKey"] = args.SortKey
		inputs["status"] = args.Status
		inputs["tags"] = args.Tags
		inputs["tenantId"] = args.TenantId
	}
	outputs, err := ctx.Invoke("openstack:networking/getPortIds:getPortIds", inputs)
	if err != nil {
		return nil, err
	}
	return &GetPortIdsResult{
		Ids: outputs["ids"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getPortIds.
type GetPortIdsArgs struct {
	// The administrative state of the port.
	AdminStateUp interface{}
	// Human-readable description of the port.
	Description interface{}
	// The ID of the device the port belongs to.
	DeviceId interface{}
	// The device owner of the port.
	DeviceOwner interface{}
	// The port IP address filter.
	FixedIp interface{}
	// The MAC address of the port.
	MacAddress interface{}
	// The name of the port.
	Name interface{}
	// The ID of the network the port belongs to.
	NetworkId interface{}
	// The owner of the port.
	ProjectId interface{}
	// The region in which to obtain the V2 Neutron client.
	// A Neutron client is needed to retrieve port ids. If omitted, the
	// `region` argument of the provider is used.
	Region interface{}
	// The list of port security group IDs to filter.
	SecurityGroupIds interface{}
	// Order the results in either `asc` or `desc`.
	// Defaults to none.
	SortDirection interface{}
	// Sort ports based on a certain key. Defaults to none.
	SortKey interface{}
	// The status of the port.
	Status interface{}
	// The list of port tags to filter.
	Tags interface{}
	TenantId interface{}
}

// A collection of values returned by getPortIds.
type GetPortIdsResult struct {
	Ids interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
