// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 Neutron QoS policy resource within OpenStack.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/networking_qos_policy_v2.html.markdown.
type QosPolicy struct {
	s *pulumi.ResourceState
}

// NewQosPolicy registers a new resource with the given unique name, arguments, and options.
func NewQosPolicy(ctx *pulumi.Context,
	name string, args *QosPolicyArgs, opts ...pulumi.ResourceOpt) (*QosPolicy, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["isDefault"] = nil
		inputs["name"] = nil
		inputs["projectId"] = nil
		inputs["region"] = nil
		inputs["shared"] = nil
		inputs["tags"] = nil
		inputs["valueSpecs"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["isDefault"] = args.IsDefault
		inputs["name"] = args.Name
		inputs["projectId"] = args.ProjectId
		inputs["region"] = args.Region
		inputs["shared"] = args.Shared
		inputs["tags"] = args.Tags
		inputs["valueSpecs"] = args.ValueSpecs
	}
	inputs["allTags"] = nil
	inputs["createdAt"] = nil
	inputs["revisionNumber"] = nil
	inputs["updatedAt"] = nil
	s, err := ctx.RegisterResource("openstack:networking/qosPolicy:QosPolicy", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &QosPolicy{s: s}, nil
}

// GetQosPolicy gets an existing QosPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQosPolicy(ctx *pulumi.Context,
	name string, id pulumi.ID, state *QosPolicyState, opts ...pulumi.ResourceOpt) (*QosPolicy, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allTags"] = state.AllTags
		inputs["createdAt"] = state.CreatedAt
		inputs["description"] = state.Description
		inputs["isDefault"] = state.IsDefault
		inputs["name"] = state.Name
		inputs["projectId"] = state.ProjectId
		inputs["region"] = state.Region
		inputs["revisionNumber"] = state.RevisionNumber
		inputs["shared"] = state.Shared
		inputs["tags"] = state.Tags
		inputs["updatedAt"] = state.UpdatedAt
		inputs["valueSpecs"] = state.ValueSpecs
	}
	s, err := ctx.ReadResource("openstack:networking/qosPolicy:QosPolicy", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &QosPolicy{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *QosPolicy) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *QosPolicy) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The collection of tags assigned on the QoS policy, which have been
// explicitly and implicitly added.
func (r *QosPolicy) AllTags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["allTags"])
}

// The time at which QoS policy was created.
func (r *QosPolicy) CreatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createdAt"])
}

// The human-readable description for the QoS policy.
// Changing this updates the description of the existing QoS policy.
func (r *QosPolicy) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Indicates whether the QoS policy is default
// QoS policy or not. Changing this updates the default status of the existing
// QoS policy.
func (r *QosPolicy) IsDefault() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["isDefault"])
}

// The name of the QoS policy. Changing this updates the name of
// the existing QoS policy.
func (r *QosPolicy) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The owner of the QoS policy. Required if admin wants to
// create a QoS policy for another project. Changing this creates a new QoS policy.
func (r *QosPolicy) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create a Neutron Qos policy. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// QoS policy.
func (r *QosPolicy) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The revision number of the QoS policy.
func (r *QosPolicy) RevisionNumber() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["revisionNumber"])
}

// Indicates whether this QoS policy is shared across
// all projects. Changing this updates the shared status of the existing
// QoS policy.
func (r *QosPolicy) Shared() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["shared"])
}

// A set of string tags for the QoS policy.
func (r *QosPolicy) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// The time at which QoS policy was created.
func (r *QosPolicy) UpdatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["updatedAt"])
}

// Map of additional options.
func (r *QosPolicy) ValueSpecs() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["valueSpecs"])
}

// Input properties used for looking up and filtering QosPolicy resources.
type QosPolicyState struct {
	// The collection of tags assigned on the QoS policy, which have been
	// explicitly and implicitly added.
	AllTags interface{}
	// The time at which QoS policy was created.
	CreatedAt interface{}
	// The human-readable description for the QoS policy.
	// Changing this updates the description of the existing QoS policy.
	Description interface{}
	// Indicates whether the QoS policy is default
	// QoS policy or not. Changing this updates the default status of the existing
	// QoS policy.
	IsDefault interface{}
	// The name of the QoS policy. Changing this updates the name of
	// the existing QoS policy.
	Name interface{}
	// The owner of the QoS policy. Required if admin wants to
	// create a QoS policy for another project. Changing this creates a new QoS policy.
	ProjectId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron Qos policy. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// QoS policy.
	Region interface{}
	// The revision number of the QoS policy.
	RevisionNumber interface{}
	// Indicates whether this QoS policy is shared across
	// all projects. Changing this updates the shared status of the existing
	// QoS policy.
	Shared interface{}
	// A set of string tags for the QoS policy.
	Tags interface{}
	// The time at which QoS policy was created.
	UpdatedAt interface{}
	// Map of additional options.
	ValueSpecs interface{}
}

// The set of arguments for constructing a QosPolicy resource.
type QosPolicyArgs struct {
	// The human-readable description for the QoS policy.
	// Changing this updates the description of the existing QoS policy.
	Description interface{}
	// Indicates whether the QoS policy is default
	// QoS policy or not. Changing this updates the default status of the existing
	// QoS policy.
	IsDefault interface{}
	// The name of the QoS policy. Changing this updates the name of
	// the existing QoS policy.
	Name interface{}
	// The owner of the QoS policy. Required if admin wants to
	// create a QoS policy for another project. Changing this creates a new QoS policy.
	ProjectId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron Qos policy. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// QoS policy.
	Region interface{}
	// Indicates whether this QoS policy is shared across
	// all projects. Changing this updates the shared status of the existing
	// QoS policy.
	Shared interface{}
	// A set of string tags for the QoS policy.
	Tags interface{}
	// Map of additional options.
	ValueSpecs interface{}
}
