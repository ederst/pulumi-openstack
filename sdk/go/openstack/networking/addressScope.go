// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 Neutron addressscope resource within OpenStack.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/networking_addressscope_v2.html.markdown.
type AddressScope struct {
	s *pulumi.ResourceState
}

// NewAddressScope registers a new resource with the given unique name, arguments, and options.
func NewAddressScope(ctx *pulumi.Context,
	name string, args *AddressScopeArgs, opts ...pulumi.ResourceOpt) (*AddressScope, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["ipVersion"] = nil
		inputs["name"] = nil
		inputs["projectId"] = nil
		inputs["region"] = nil
		inputs["shared"] = nil
	} else {
		inputs["ipVersion"] = args.IpVersion
		inputs["name"] = args.Name
		inputs["projectId"] = args.ProjectId
		inputs["region"] = args.Region
		inputs["shared"] = args.Shared
	}
	s, err := ctx.RegisterResource("openstack:networking/addressScope:AddressScope", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AddressScope{s: s}, nil
}

// GetAddressScope gets an existing AddressScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAddressScope(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AddressScopeState, opts ...pulumi.ResourceOpt) (*AddressScope, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["ipVersion"] = state.IpVersion
		inputs["name"] = state.Name
		inputs["projectId"] = state.ProjectId
		inputs["region"] = state.Region
		inputs["shared"] = state.Shared
	}
	s, err := ctx.ReadResource("openstack:networking/addressScope:AddressScope", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AddressScope{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AddressScope) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AddressScope) ID() pulumi.IDOutput {
	return r.s.ID()
}

// IP version, either 4 (default) or 6. Changing this
// creates a new address-scope.
func (r *AddressScope) IpVersion() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["ipVersion"])
}

// The name of the address-scope. Changing this updates the
// name of the existing address-scope.
func (r *AddressScope) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The owner of the address-scope. Required if admin
// wants to create a address-scope for another project. Changing this creates a
// new address-scope.
func (r *AddressScope) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create a Neutron address-scope. If omitted,
// the `region` argument of the provider is used. Changing this creates a new
// address-scope.
func (r *AddressScope) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// Indicates whether this address-scope is shared across
// all projects. Changing this updates the shared status of the existing
// address-scope.
func (r *AddressScope) Shared() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["shared"])
}

// Input properties used for looking up and filtering AddressScope resources.
type AddressScopeState struct {
	// IP version, either 4 (default) or 6. Changing this
	// creates a new address-scope.
	IpVersion interface{}
	// The name of the address-scope. Changing this updates the
	// name of the existing address-scope.
	Name interface{}
	// The owner of the address-scope. Required if admin
	// wants to create a address-scope for another project. Changing this creates a
	// new address-scope.
	ProjectId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron address-scope. If omitted,
	// the `region` argument of the provider is used. Changing this creates a new
	// address-scope.
	Region interface{}
	// Indicates whether this address-scope is shared across
	// all projects. Changing this updates the shared status of the existing
	// address-scope.
	Shared interface{}
}

// The set of arguments for constructing a AddressScope resource.
type AddressScopeArgs struct {
	// IP version, either 4 (default) or 6. Changing this
	// creates a new address-scope.
	IpVersion interface{}
	// The name of the address-scope. Changing this updates the
	// name of the existing address-scope.
	Name interface{}
	// The owner of the address-scope. Required if admin
	// wants to create a address-scope for another project. Changing this creates a
	// new address-scope.
	ProjectId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron address-scope. If omitted,
	// the `region` argument of the provider is used. Changing this creates a new
	// address-scope.
	Region interface{}
	// Indicates whether this address-scope is shared across
	// all projects. Changing this updates the shared status of the existing
	// address-scope.
	Shared interface{}
}
