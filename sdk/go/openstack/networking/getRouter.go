// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this data source to get the ID of an available OpenStack router.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/d/networking_router_v2.html.markdown.
func LookupRouter(ctx *pulumi.Context, args *GetRouterArgs) (*GetRouterResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["adminStateUp"] = args.AdminStateUp
		inputs["description"] = args.Description
		inputs["distributed"] = args.Distributed
		inputs["enableSnat"] = args.EnableSnat
		inputs["name"] = args.Name
		inputs["region"] = args.Region
		inputs["routerId"] = args.RouterId
		inputs["status"] = args.Status
		inputs["tags"] = args.Tags
		inputs["tenantId"] = args.TenantId
	}
	outputs, err := ctx.Invoke("openstack:networking/getRouter:getRouter", inputs)
	if err != nil {
		return nil, err
	}
	return &GetRouterResult{
		AdminStateUp: outputs["adminStateUp"],
		AllTags: outputs["allTags"],
		AvailabilityZoneHints: outputs["availabilityZoneHints"],
		Description: outputs["description"],
		Distributed: outputs["distributed"],
		EnableSnat: outputs["enableSnat"],
		ExternalFixedIps: outputs["externalFixedIps"],
		ExternalNetworkId: outputs["externalNetworkId"],
		Name: outputs["name"],
		Region: outputs["region"],
		RouterId: outputs["routerId"],
		Status: outputs["status"],
		Tags: outputs["tags"],
		TenantId: outputs["tenantId"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getRouter.
type GetRouterArgs struct {
	// Administrative up/down status for the router (must be "true" or "false" if provided).
	AdminStateUp interface{}
	// Human-readable description of the router.
	Description interface{}
	// Indicates whether or not to get a distributed router.
	Distributed interface{}
	EnableSnat interface{}
	// The name of the router.
	Name interface{}
	// The region in which to obtain the V2 Neutron client.
	// A Neutron client is needed to retrieve router ids. If omitted, the
	// `region` argument of the provider is used.
	Region interface{}
	// The UUID of the router resource.
	RouterId interface{}
	// The status of the router (ACTIVE/DOWN).
	Status interface{}
	// The list of router tags to filter.
	Tags interface{}
	// The owner of the router.
	TenantId interface{}
}

// A collection of values returned by getRouter.
type GetRouterResult struct {
	AdminStateUp interface{}
	// The set of string tags applied on the router.
	AllTags interface{}
	// The availability zone that is used to make router resources highly available.
	AvailabilityZoneHints interface{}
	Description interface{}
	Distributed interface{}
	// The value that points out if the Source NAT is enabled on the router.
	EnableSnat interface{}
	// The external fixed IPs of the router.
	ExternalFixedIps interface{}
	// The network UUID of an external gateway for the router.
	ExternalNetworkId interface{}
	Name interface{}
	Region interface{}
	RouterId interface{}
	Status interface{}
	Tags interface{}
	TenantId interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
