// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this data source to get the ID of an available OpenStack network.
func LookupNetwork(ctx *pulumi.Context, args *GetNetworkArgs) (*GetNetworkResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["description"] = args.Description
		inputs["external"] = args.External
		inputs["matchingSubnetCidr"] = args.MatchingSubnetCidr
		inputs["mtu"] = args.Mtu
		inputs["name"] = args.Name
		inputs["networkId"] = args.NetworkId
		inputs["region"] = args.Region
		inputs["status"] = args.Status
		inputs["tags"] = args.Tags
		inputs["tenantId"] = args.TenantId
		inputs["transparentVlan"] = args.TransparentVlan
	}
	outputs, err := ctx.Invoke("openstack:networking/getNetwork:getNetwork", inputs)
	if err != nil {
		return nil, err
	}
	return &GetNetworkResult{
		AdminStateUp: outputs["adminStateUp"],
		AllTags: outputs["allTags"],
		AvailabilityZoneHints: outputs["availabilityZoneHints"],
		Description: outputs["description"],
		DnsDomain: outputs["dnsDomain"],
		External: outputs["external"],
		MatchingSubnetCidr: outputs["matchingSubnetCidr"],
		Mtu: outputs["mtu"],
		Name: outputs["name"],
		NetworkId: outputs["networkId"],
		Region: outputs["region"],
		Shared: outputs["shared"],
		Status: outputs["status"],
		Tags: outputs["tags"],
		TenantId: outputs["tenantId"],
		TransparentVlan: outputs["transparentVlan"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getNetwork.
type GetNetworkArgs struct {
	// Human-readable description of the network.
	Description interface{}
	// The external routing facility of the network.
	External interface{}
	// The CIDR of a subnet within the network.
	MatchingSubnetCidr interface{}
	// The network MTU to filter. Available, when Neutron `net-mtu`
	// extension is enabled.
	Mtu interface{}
	// The name of the network.
	Name interface{}
	// The ID of the network.
	NetworkId interface{}
	// The region in which to obtain the V2 Neutron client.
	// A Neutron client is needed to retrieve networks ids. If omitted, the
	// `region` argument of the provider is used.
	Region interface{}
	// The status of the network.
	Status interface{}
	// The list of network tags to filter.
	Tags interface{}
	// The owner of the network.
	TenantId interface{}
	// The VLAN transparent attribute for the
	// network.
	TransparentVlan interface{}
}

// A collection of values returned by getNetwork.
type GetNetworkResult struct {
	// The administrative state of the network.
	AdminStateUp interface{}
	// The set of string tags applied on the network.
	AllTags interface{}
	// The availability zone candidates for the network.
	AvailabilityZoneHints interface{}
	// See Argument Reference above.
	Description interface{}
	// The network DNS domain. Available, when Neutron DNS extension
	// is enabled
	DnsDomain interface{}
	// See Argument Reference above.
	External interface{}
	MatchingSubnetCidr interface{}
	// See Argument Reference above.
	Mtu interface{}
	// See Argument Reference above.
	Name interface{}
	NetworkId interface{}
	// See Argument Reference above.
	Region interface{}
	// Specifies whether the network resource can be accessed by any
	// tenant or not.
	Shared interface{}
	Status interface{}
	Tags interface{}
	TenantId interface{}
	// See Argument Reference above.
	TransparentVlan interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
