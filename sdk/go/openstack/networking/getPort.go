// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this data source to get the ID of an available OpenStack port.
func LookupPort(ctx *pulumi.Context, args *GetPortArgs) (*GetPortResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["adminStateUp"] = args.AdminStateUp
		inputs["description"] = args.Description
		inputs["deviceId"] = args.DeviceId
		inputs["deviceOwner"] = args.DeviceOwner
		inputs["fixedIp"] = args.FixedIp
		inputs["macAddress"] = args.MacAddress
		inputs["name"] = args.Name
		inputs["networkId"] = args.NetworkId
		inputs["portId"] = args.PortId
		inputs["projectId"] = args.ProjectId
		inputs["region"] = args.Region
		inputs["securityGroupIds"] = args.SecurityGroupIds
		inputs["status"] = args.Status
		inputs["tags"] = args.Tags
		inputs["tenantId"] = args.TenantId
	}
	outputs, err := ctx.Invoke("openstack:networking/getPort:getPort", inputs)
	if err != nil {
		return nil, err
	}
	return &GetPortResult{
		AllFixedIps: outputs["allFixedIps"],
		AllSecurityGroupIds: outputs["allSecurityGroupIds"],
		AllTags: outputs["allTags"],
		AllowedAddressPairs: outputs["allowedAddressPairs"],
		ExtraDhcpOptions: outputs["extraDhcpOptions"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getPort.
type GetPortArgs struct {
	// The administrative state of the port.
	AdminStateUp interface{}
	// Human-readable description of the port.
	Description interface{}
	// The ID of the device the port belongs to.
	DeviceId interface{}
	// The device owner of the port.
	DeviceOwner interface{}
	// The port IP address filter.
	FixedIp interface{}
	// The MAC address of the port.
	MacAddress interface{}
	// The name of the port.
	Name interface{}
	// The ID of the network the port belongs to.
	NetworkId interface{}
	// The ID of the port.
	PortId interface{}
	// The owner of the port.
	ProjectId interface{}
	// The region in which to obtain the V2 Neutron client.
	// A Neutron client is needed to retrieve port ids. If omitted, the
	// `region` argument of the provider is used.
	Region interface{}
	// The list of port security group IDs to filter.
	SecurityGroupIds interface{}
	// The status of the port.
	Status interface{}
	// The list of port tags to filter.
	Tags interface{}
	TenantId interface{}
}

// A collection of values returned by getPort.
type GetPortResult struct {
	// The collection of Fixed IP addresses on the port in the
	// order returned by the Network v2 API.
	AllFixedIps interface{}
	// The set of security group IDs applied on the port.
	AllSecurityGroupIds interface{}
	// The set of string tags applied on the port.
	AllTags interface{}
	// An IP/MAC Address pair of additional IP
	// addresses that can be active on this port. The structure is described
	// below.
	AllowedAddressPairs interface{}
	// An extra DHCP option configured on the port.
	// The structure is described below.
	ExtraDhcpOptions interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
