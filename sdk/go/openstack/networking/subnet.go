// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 Neutron subnet resource within OpenStack.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/networking_subnet_v2.html.markdown.
type Subnet struct {
	s *pulumi.ResourceState
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOpt) (*Subnet, error) {
	if args == nil || args.NetworkId == nil {
		return nil, errors.New("missing required argument 'NetworkId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["allocationPools"] = nil
		inputs["allocationPoolsCollection"] = nil
		inputs["cidr"] = nil
		inputs["description"] = nil
		inputs["dnsNameservers"] = nil
		inputs["enableDhcp"] = nil
		inputs["gatewayIp"] = nil
		inputs["hostRoutes"] = nil
		inputs["ipVersion"] = nil
		inputs["ipv6AddressMode"] = nil
		inputs["ipv6RaMode"] = nil
		inputs["name"] = nil
		inputs["networkId"] = nil
		inputs["noGateway"] = nil
		inputs["prefixLength"] = nil
		inputs["region"] = nil
		inputs["subnetpoolId"] = nil
		inputs["tags"] = nil
		inputs["tenantId"] = nil
		inputs["valueSpecs"] = nil
	} else {
		inputs["allocationPools"] = args.AllocationPools
		inputs["allocationPoolsCollection"] = args.AllocationPoolsCollection
		inputs["cidr"] = args.Cidr
		inputs["description"] = args.Description
		inputs["dnsNameservers"] = args.DnsNameservers
		inputs["enableDhcp"] = args.EnableDhcp
		inputs["gatewayIp"] = args.GatewayIp
		inputs["hostRoutes"] = args.HostRoutes
		inputs["ipVersion"] = args.IpVersion
		inputs["ipv6AddressMode"] = args.Ipv6AddressMode
		inputs["ipv6RaMode"] = args.Ipv6RaMode
		inputs["name"] = args.Name
		inputs["networkId"] = args.NetworkId
		inputs["noGateway"] = args.NoGateway
		inputs["prefixLength"] = args.PrefixLength
		inputs["region"] = args.Region
		inputs["subnetpoolId"] = args.SubnetpoolId
		inputs["tags"] = args.Tags
		inputs["tenantId"] = args.TenantId
		inputs["valueSpecs"] = args.ValueSpecs
	}
	inputs["allTags"] = nil
	s, err := ctx.RegisterResource("openstack:networking/subnet:Subnet", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnet{s: s}, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SubnetState, opts ...pulumi.ResourceOpt) (*Subnet, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["allTags"] = state.AllTags
		inputs["allocationPools"] = state.AllocationPools
		inputs["allocationPoolsCollection"] = state.AllocationPoolsCollection
		inputs["cidr"] = state.Cidr
		inputs["description"] = state.Description
		inputs["dnsNameservers"] = state.DnsNameservers
		inputs["enableDhcp"] = state.EnableDhcp
		inputs["gatewayIp"] = state.GatewayIp
		inputs["hostRoutes"] = state.HostRoutes
		inputs["ipVersion"] = state.IpVersion
		inputs["ipv6AddressMode"] = state.Ipv6AddressMode
		inputs["ipv6RaMode"] = state.Ipv6RaMode
		inputs["name"] = state.Name
		inputs["networkId"] = state.NetworkId
		inputs["noGateway"] = state.NoGateway
		inputs["prefixLength"] = state.PrefixLength
		inputs["region"] = state.Region
		inputs["subnetpoolId"] = state.SubnetpoolId
		inputs["tags"] = state.Tags
		inputs["tenantId"] = state.TenantId
		inputs["valueSpecs"] = state.ValueSpecs
	}
	s, err := ctx.ReadResource("openstack:networking/subnet:Subnet", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Subnet{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Subnet) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Subnet) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The collection of ags assigned on the subnet, which have been
// explicitly and implicitly added.
func (r *Subnet) AllTags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["allTags"])
}

// A block declaring the start and end range of
// the IP addresses available for use with DHCP in this subnet. Multiple
// `allocation_pool` blocks can be declared, providing the subnet with more
// than one range of IP addresses to use with DHCP. However, each IP range
// must be from the same CIDR that the subnet is part of.
// The `allocation_pool` block is documented below.
func (r *Subnet) AllocationPools() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["allocationPools"])
}

// 
// A block declaring the start and end range of the IP addresses available for
// use with DHCP in this subnet.
// The `allocation_pools` block is documented below.
func (r *Subnet) AllocationPoolsCollection() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["allocationPoolsCollection"])
}

// CIDR representing IP range for this subnet, based on IP
// version. You can omit this option if you are creating a subnet from a
// subnet pool.
func (r *Subnet) Cidr() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["cidr"])
}

// Human-readable description of the subnet. Changing this
// updates the name of the existing subnet.
func (r *Subnet) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// An array of DNS name server names used by hosts
// in this subnet. Changing this updates the DNS name servers for the existing
// subnet.
func (r *Subnet) DnsNameservers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["dnsNameservers"])
}

// The administrative state of the network.
// Acceptable values are "true" and "false". Changing this value enables or
// disables the DHCP capabilities of the existing subnet. Defaults to true.
func (r *Subnet) EnableDhcp() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableDhcp"])
}

// Default gateway used by devices in this subnet.
// Leaving this blank and not setting `no_gateway` will cause a default
// gateway of `.1` to be used. Changing this updates the gateway IP of the
// existing subnet.
func (r *Subnet) GatewayIp() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["gatewayIp"])
}

// (**Deprecated** - use `openstack_networking_subnet_route_v2`
// instead) An array of routes that should be used by devices
// with IPs from this subnet (not including local subnet route). The host_route
// object structure is documented below. Changing this updates the host routes
// for the existing subnet.
func (r *Subnet) HostRoutes() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["hostRoutes"])
}

// IP version, either 4 (default) or 6. Changing this creates a
// new subnet.
func (r *Subnet) IpVersion() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["ipVersion"])
}

// The IPv6 address mode. Valid values are
// `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
func (r *Subnet) Ipv6AddressMode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipv6AddressMode"])
}

// The IPv6 Router Advertisement mode. Valid values
// are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
func (r *Subnet) Ipv6RaMode() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipv6RaMode"])
}

// The name of the subnet. Changing this updates the name of
// the existing subnet.
func (r *Subnet) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The UUID of the parent network. Changing this
// creates a new subnet.
func (r *Subnet) NetworkId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkId"])
}

// Do not set a gateway IP on this subnet. Changing
// this removes or adds a default gateway IP of the existing subnet.
func (r *Subnet) NoGateway() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["noGateway"])
}

// The prefix length to use when creating a subnet
// from a subnet pool. The default subnet pool prefix length that was defined
// when creating the subnet pool will be used if not provided. Changing this
// creates a new subnet.
func (r *Subnet) PrefixLength() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["prefixLength"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create a Neutron subnet. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// subnet.
func (r *Subnet) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The ID of the subnetpool associated with the subnet.
func (r *Subnet) SubnetpoolId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["subnetpoolId"])
}

// A set of string tags for the subnet.
func (r *Subnet) Tags() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["tags"])
}

// The owner of the subnet. Required if admin wants to
// create a subnet for another tenant. Changing this creates a new subnet.
func (r *Subnet) TenantId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tenantId"])
}

// Map of additional options.
func (r *Subnet) ValueSpecs() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["valueSpecs"])
}

// Input properties used for looking up and filtering Subnet resources.
type SubnetState struct {
	// The collection of ags assigned on the subnet, which have been
	// explicitly and implicitly added.
	AllTags interface{}
	// A block declaring the start and end range of
	// the IP addresses available for use with DHCP in this subnet. Multiple
	// `allocation_pool` blocks can be declared, providing the subnet with more
	// than one range of IP addresses to use with DHCP. However, each IP range
	// must be from the same CIDR that the subnet is part of.
	// The `allocation_pool` block is documented below.
	AllocationPools interface{}
	// 
	// A block declaring the start and end range of the IP addresses available for
	// use with DHCP in this subnet.
	// The `allocation_pools` block is documented below.
	AllocationPoolsCollection interface{}
	// CIDR representing IP range for this subnet, based on IP
	// version. You can omit this option if you are creating a subnet from a
	// subnet pool.
	Cidr interface{}
	// Human-readable description of the subnet. Changing this
	// updates the name of the existing subnet.
	Description interface{}
	// An array of DNS name server names used by hosts
	// in this subnet. Changing this updates the DNS name servers for the existing
	// subnet.
	DnsNameservers interface{}
	// The administrative state of the network.
	// Acceptable values are "true" and "false". Changing this value enables or
	// disables the DHCP capabilities of the existing subnet. Defaults to true.
	EnableDhcp interface{}
	// Default gateway used by devices in this subnet.
	// Leaving this blank and not setting `no_gateway` will cause a default
	// gateway of `.1` to be used. Changing this updates the gateway IP of the
	// existing subnet.
	GatewayIp interface{}
	// (**Deprecated** - use `openstack_networking_subnet_route_v2`
	// instead) An array of routes that should be used by devices
	// with IPs from this subnet (not including local subnet route). The host_route
	// object structure is documented below. Changing this updates the host routes
	// for the existing subnet.
	HostRoutes interface{}
	// IP version, either 4 (default) or 6. Changing this creates a
	// new subnet.
	IpVersion interface{}
	// The IPv6 address mode. Valid values are
	// `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
	Ipv6AddressMode interface{}
	// The IPv6 Router Advertisement mode. Valid values
	// are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
	Ipv6RaMode interface{}
	// The name of the subnet. Changing this updates the name of
	// the existing subnet.
	Name interface{}
	// The UUID of the parent network. Changing this
	// creates a new subnet.
	NetworkId interface{}
	// Do not set a gateway IP on this subnet. Changing
	// this removes or adds a default gateway IP of the existing subnet.
	NoGateway interface{}
	// The prefix length to use when creating a subnet
	// from a subnet pool. The default subnet pool prefix length that was defined
	// when creating the subnet pool will be used if not provided. Changing this
	// creates a new subnet.
	PrefixLength interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron subnet. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// subnet.
	Region interface{}
	// The ID of the subnetpool associated with the subnet.
	SubnetpoolId interface{}
	// A set of string tags for the subnet.
	Tags interface{}
	// The owner of the subnet. Required if admin wants to
	// create a subnet for another tenant. Changing this creates a new subnet.
	TenantId interface{}
	// Map of additional options.
	ValueSpecs interface{}
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// A block declaring the start and end range of
	// the IP addresses available for use with DHCP in this subnet. Multiple
	// `allocation_pool` blocks can be declared, providing the subnet with more
	// than one range of IP addresses to use with DHCP. However, each IP range
	// must be from the same CIDR that the subnet is part of.
	// The `allocation_pool` block is documented below.
	AllocationPools interface{}
	// 
	// A block declaring the start and end range of the IP addresses available for
	// use with DHCP in this subnet.
	// The `allocation_pools` block is documented below.
	AllocationPoolsCollection interface{}
	// CIDR representing IP range for this subnet, based on IP
	// version. You can omit this option if you are creating a subnet from a
	// subnet pool.
	Cidr interface{}
	// Human-readable description of the subnet. Changing this
	// updates the name of the existing subnet.
	Description interface{}
	// An array of DNS name server names used by hosts
	// in this subnet. Changing this updates the DNS name servers for the existing
	// subnet.
	DnsNameservers interface{}
	// The administrative state of the network.
	// Acceptable values are "true" and "false". Changing this value enables or
	// disables the DHCP capabilities of the existing subnet. Defaults to true.
	EnableDhcp interface{}
	// Default gateway used by devices in this subnet.
	// Leaving this blank and not setting `no_gateway` will cause a default
	// gateway of `.1` to be used. Changing this updates the gateway IP of the
	// existing subnet.
	GatewayIp interface{}
	// (**Deprecated** - use `openstack_networking_subnet_route_v2`
	// instead) An array of routes that should be used by devices
	// with IPs from this subnet (not including local subnet route). The host_route
	// object structure is documented below. Changing this updates the host routes
	// for the existing subnet.
	HostRoutes interface{}
	// IP version, either 4 (default) or 6. Changing this creates a
	// new subnet.
	IpVersion interface{}
	// The IPv6 address mode. Valid values are
	// `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
	Ipv6AddressMode interface{}
	// The IPv6 Router Advertisement mode. Valid values
	// are `dhcpv6-stateful`, `dhcpv6-stateless`, or `slaac`.
	Ipv6RaMode interface{}
	// The name of the subnet. Changing this updates the name of
	// the existing subnet.
	Name interface{}
	// The UUID of the parent network. Changing this
	// creates a new subnet.
	NetworkId interface{}
	// Do not set a gateway IP on this subnet. Changing
	// this removes or adds a default gateway IP of the existing subnet.
	NoGateway interface{}
	// The prefix length to use when creating a subnet
	// from a subnet pool. The default subnet pool prefix length that was defined
	// when creating the subnet pool will be used if not provided. Changing this
	// creates a new subnet.
	PrefixLength interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron subnet. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// subnet.
	Region interface{}
	// The ID of the subnetpool associated with the subnet.
	SubnetpoolId interface{}
	// A set of string tags for the subnet.
	Tags interface{}
	// The owner of the subnet. Required if admin wants to
	// create a subnet for another tenant. Changing this creates a new subnet.
	TenantId interface{}
	// Map of additional options.
	ValueSpecs interface{}
}
