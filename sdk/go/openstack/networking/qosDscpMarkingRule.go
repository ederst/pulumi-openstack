// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 Neutron QoS DSCP marking rule resource within OpenStack.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/networking_qos_dscp_marking_rule_v2.html.markdown.
type QosDscpMarkingRule struct {
	s *pulumi.ResourceState
}

// NewQosDscpMarkingRule registers a new resource with the given unique name, arguments, and options.
func NewQosDscpMarkingRule(ctx *pulumi.Context,
	name string, args *QosDscpMarkingRuleArgs, opts ...pulumi.ResourceOpt) (*QosDscpMarkingRule, error) {
	if args == nil || args.DscpMark == nil {
		return nil, errors.New("missing required argument 'DscpMark'")
	}
	if args == nil || args.QosPolicyId == nil {
		return nil, errors.New("missing required argument 'QosPolicyId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dscpMark"] = nil
		inputs["qosPolicyId"] = nil
		inputs["region"] = nil
	} else {
		inputs["dscpMark"] = args.DscpMark
		inputs["qosPolicyId"] = args.QosPolicyId
		inputs["region"] = args.Region
	}
	s, err := ctx.RegisterResource("openstack:networking/qosDscpMarkingRule:QosDscpMarkingRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &QosDscpMarkingRule{s: s}, nil
}

// GetQosDscpMarkingRule gets an existing QosDscpMarkingRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQosDscpMarkingRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *QosDscpMarkingRuleState, opts ...pulumi.ResourceOpt) (*QosDscpMarkingRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dscpMark"] = state.DscpMark
		inputs["qosPolicyId"] = state.QosPolicyId
		inputs["region"] = state.Region
	}
	s, err := ctx.ReadResource("openstack:networking/qosDscpMarkingRule:QosDscpMarkingRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &QosDscpMarkingRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *QosDscpMarkingRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *QosDscpMarkingRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The value of DSCP mark. Changing this updates the DSCP mark value existing
// QoS DSCP marking rule.
func (r *QosDscpMarkingRule) DscpMark() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["dscpMark"])
}

// The QoS policy reference. Changing this creates a new QoS DSCP marking rule.
func (r *QosDscpMarkingRule) QosPolicyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["qosPolicyId"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create a Neutron QoS DSCP marking rule. If omitted, the
// `region` argument of the provider is used. Changing this creates a new QoS DSCP marking rule.
func (r *QosDscpMarkingRule) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Input properties used for looking up and filtering QosDscpMarkingRule resources.
type QosDscpMarkingRuleState struct {
	// The value of DSCP mark. Changing this updates the DSCP mark value existing
	// QoS DSCP marking rule.
	DscpMark interface{}
	// The QoS policy reference. Changing this creates a new QoS DSCP marking rule.
	QosPolicyId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron QoS DSCP marking rule. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new QoS DSCP marking rule.
	Region interface{}
}

// The set of arguments for constructing a QosDscpMarkingRule resource.
type QosDscpMarkingRuleArgs struct {
	// The value of DSCP mark. Changing this updates the DSCP mark value existing
	// QoS DSCP marking rule.
	DscpMark interface{}
	// The QoS policy reference. Changing this creates a new QoS DSCP marking rule.
	QosPolicyId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron QoS DSCP marking rule. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new QoS DSCP marking rule.
	Region interface{}
}
