// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 networking quota resource within OpenStack.
// 
// > **Note:** This usually requires admin privileges.
// 
// > **Note:** This resource has a no-op deletion so no actual actions will be done against the OpenStack API 
//     in case of delete call.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/networking_quota_v2.html.markdown.
type QuotaV2 struct {
	s *pulumi.ResourceState
}

// NewQuotaV2 registers a new resource with the given unique name, arguments, and options.
func NewQuotaV2(ctx *pulumi.Context,
	name string, args *QuotaV2Args, opts ...pulumi.ResourceOpt) (*QuotaV2, error) {
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["floatingip"] = nil
		inputs["network"] = nil
		inputs["port"] = nil
		inputs["projectId"] = nil
		inputs["rbacPolicy"] = nil
		inputs["region"] = nil
		inputs["router"] = nil
		inputs["securityGroup"] = nil
		inputs["securityGroupRule"] = nil
		inputs["subnet"] = nil
		inputs["subnetpool"] = nil
	} else {
		inputs["floatingip"] = args.Floatingip
		inputs["network"] = args.Network
		inputs["port"] = args.Port
		inputs["projectId"] = args.ProjectId
		inputs["rbacPolicy"] = args.RbacPolicy
		inputs["region"] = args.Region
		inputs["router"] = args.Router
		inputs["securityGroup"] = args.SecurityGroup
		inputs["securityGroupRule"] = args.SecurityGroupRule
		inputs["subnet"] = args.Subnet
		inputs["subnetpool"] = args.Subnetpool
	}
	s, err := ctx.RegisterResource("openstack:networking/quotaV2:QuotaV2", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &QuotaV2{s: s}, nil
}

// GetQuotaV2 gets an existing QuotaV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQuotaV2(ctx *pulumi.Context,
	name string, id pulumi.ID, state *QuotaV2State, opts ...pulumi.ResourceOpt) (*QuotaV2, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["floatingip"] = state.Floatingip
		inputs["network"] = state.Network
		inputs["port"] = state.Port
		inputs["projectId"] = state.ProjectId
		inputs["rbacPolicy"] = state.RbacPolicy
		inputs["region"] = state.Region
		inputs["router"] = state.Router
		inputs["securityGroup"] = state.SecurityGroup
		inputs["securityGroupRule"] = state.SecurityGroupRule
		inputs["subnet"] = state.Subnet
		inputs["subnetpool"] = state.Subnetpool
	}
	s, err := ctx.ReadResource("openstack:networking/quotaV2:QuotaV2", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &QuotaV2{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *QuotaV2) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *QuotaV2) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Quota value for floating IPs. Changing this updates the
// existing quota.
func (r *QuotaV2) Floatingip() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["floatingip"])
}

// Quota value for networks. Changing this updates the
// existing quota.
func (r *QuotaV2) Network() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["network"])
}

// Quota value for ports. Changing this updates the
// existing quota.
func (r *QuotaV2) Port() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["port"])
}

// ID of the project to manage quota. Changing this
// creates new quota.
func (r *QuotaV2) ProjectId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["projectId"])
}

// Quota value for RBAC policies.
// Changing this updates the existing quota.
func (r *QuotaV2) RbacPolicy() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["rbacPolicy"])
}

// The region in which to create the quota. If
// omitted, the `region` argument of the provider is used. Changing this
// creates new quota.
func (r *QuotaV2) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// Quota value for routers. Changing this updates the
// existing quota.
func (r *QuotaV2) Router() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["router"])
}

// Quota value for security groups. Changing
// this updates the existing quota.
func (r *QuotaV2) SecurityGroup() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["securityGroup"])
}

// Quota value for security group rules.
// Changing this updates the existing quota.
func (r *QuotaV2) SecurityGroupRule() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["securityGroupRule"])
}

// Quota value for subnets. Changing
// this updates the existing quota.
func (r *QuotaV2) Subnet() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["subnet"])
}

// Quota value for subnetpools.
// Changing this updates the existing quota.
func (r *QuotaV2) Subnetpool() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["subnetpool"])
}

// Input properties used for looking up and filtering QuotaV2 resources.
type QuotaV2State struct {
	// Quota value for floating IPs. Changing this updates the
	// existing quota.
	Floatingip interface{}
	// Quota value for networks. Changing this updates the
	// existing quota.
	Network interface{}
	// Quota value for ports. Changing this updates the
	// existing quota.
	Port interface{}
	// ID of the project to manage quota. Changing this
	// creates new quota.
	ProjectId interface{}
	// Quota value for RBAC policies.
	// Changing this updates the existing quota.
	RbacPolicy interface{}
	// The region in which to create the quota. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates new quota.
	Region interface{}
	// Quota value for routers. Changing this updates the
	// existing quota.
	Router interface{}
	// Quota value for security groups. Changing
	// this updates the existing quota.
	SecurityGroup interface{}
	// Quota value for security group rules.
	// Changing this updates the existing quota.
	SecurityGroupRule interface{}
	// Quota value for subnets. Changing
	// this updates the existing quota.
	Subnet interface{}
	// Quota value for subnetpools.
	// Changing this updates the existing quota.
	Subnetpool interface{}
}

// The set of arguments for constructing a QuotaV2 resource.
type QuotaV2Args struct {
	// Quota value for floating IPs. Changing this updates the
	// existing quota.
	Floatingip interface{}
	// Quota value for networks. Changing this updates the
	// existing quota.
	Network interface{}
	// Quota value for ports. Changing this updates the
	// existing quota.
	Port interface{}
	// ID of the project to manage quota. Changing this
	// creates new quota.
	ProjectId interface{}
	// Quota value for RBAC policies.
	// Changing this updates the existing quota.
	RbacPolicy interface{}
	// The region in which to create the quota. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates new quota.
	Region interface{}
	// Quota value for routers. Changing this updates the
	// existing quota.
	Router interface{}
	// Quota value for security groups. Changing
	// this updates the existing quota.
	SecurityGroup interface{}
	// Quota value for security group rules.
	// Changing this updates the existing quota.
	SecurityGroupRule interface{}
	// Quota value for subnets. Changing
	// this updates the existing quota.
	Subnet interface{}
	// Quota value for subnetpools.
	// Changing this updates the existing quota.
	Subnetpool interface{}
}
