// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The RBAC policy resource contains functionality for working with Neutron RBAC
// Policies. Role-Based Access Control (RBAC) policy framework enables both
// operators and users to grant access to resources for specific projects.
// 
// Sharing an object with a specific project is accomplished by creating a
// policy entry that permits the target project the `accessAsShared` action
// on that object.
// 
// To make a network available as an external network for specific projects
// rather than all projects, use the `accessAsExternal` action.
// If a network is marked as external during creation, it now implicitly creates
// a wildcard RBAC policy granting everyone access to preserve previous behavior
// before this feature was added.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/networking_rbac_policy_v2.html.markdown.
type RbacPolicyV2 struct {
	s *pulumi.ResourceState
}

// NewRbacPolicyV2 registers a new resource with the given unique name, arguments, and options.
func NewRbacPolicyV2(ctx *pulumi.Context,
	name string, args *RbacPolicyV2Args, opts ...pulumi.ResourceOpt) (*RbacPolicyV2, error) {
	if args == nil || args.Action == nil {
		return nil, errors.New("missing required argument 'Action'")
	}
	if args == nil || args.ObjectId == nil {
		return nil, errors.New("missing required argument 'ObjectId'")
	}
	if args == nil || args.ObjectType == nil {
		return nil, errors.New("missing required argument 'ObjectType'")
	}
	if args == nil || args.TargetTenant == nil {
		return nil, errors.New("missing required argument 'TargetTenant'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["action"] = nil
		inputs["objectId"] = nil
		inputs["objectType"] = nil
		inputs["region"] = nil
		inputs["targetTenant"] = nil
	} else {
		inputs["action"] = args.Action
		inputs["objectId"] = args.ObjectId
		inputs["objectType"] = args.ObjectType
		inputs["region"] = args.Region
		inputs["targetTenant"] = args.TargetTenant
	}
	inputs["projectId"] = nil
	s, err := ctx.RegisterResource("openstack:networking/rbacPolicyV2:RbacPolicyV2", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RbacPolicyV2{s: s}, nil
}

// GetRbacPolicyV2 gets an existing RbacPolicyV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRbacPolicyV2(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RbacPolicyV2State, opts ...pulumi.ResourceOpt) (*RbacPolicyV2, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["action"] = state.Action
		inputs["objectId"] = state.ObjectId
		inputs["objectType"] = state.ObjectType
		inputs["projectId"] = state.ProjectId
		inputs["region"] = state.Region
		inputs["targetTenant"] = state.TargetTenant
	}
	s, err := ctx.ReadResource("openstack:networking/rbacPolicyV2:RbacPolicyV2", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &RbacPolicyV2{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *RbacPolicyV2) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *RbacPolicyV2) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Action for the RBAC policy. Can either be
// `accessAsExternal` or `accessAsShared`.
func (r *RbacPolicyV2) Action() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["action"])
}

// The ID of the `objectType` resource. An
// `objectType` of `network` returns a network ID and an `objectType` of
// `qosPolicy` returns a QoS ID.
func (r *RbacPolicyV2) ObjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["objectId"])
}

// The type of the object that the RBAC policy
// affects. Can either be `qos-policy` or `network`.
func (r *RbacPolicyV2) ObjectType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["objectType"])
}

func (r *RbacPolicyV2) ProjectId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["projectId"])
}

// The region in which to obtain the V2 networking client.
// A networking client is needed to configure a routing entry on a subnet. If omitted, the
// `region` argument of the provider is used. Changing this creates a new
// routing entry.
func (r *RbacPolicyV2) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The ID of the tenant to which the RBAC policy
// will be enforced.
func (r *RbacPolicyV2) TargetTenant() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["targetTenant"])
}

// Input properties used for looking up and filtering RbacPolicyV2 resources.
type RbacPolicyV2State struct {
	// Action for the RBAC policy. Can either be
	// `accessAsExternal` or `accessAsShared`.
	Action interface{}
	// The ID of the `objectType` resource. An
	// `objectType` of `network` returns a network ID and an `objectType` of
	// `qosPolicy` returns a QoS ID.
	ObjectId interface{}
	// The type of the object that the RBAC policy
	// affects. Can either be `qos-policy` or `network`.
	ObjectType interface{}
	ProjectId interface{}
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to configure a routing entry on a subnet. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// routing entry.
	Region interface{}
	// The ID of the tenant to which the RBAC policy
	// will be enforced.
	TargetTenant interface{}
}

// The set of arguments for constructing a RbacPolicyV2 resource.
type RbacPolicyV2Args struct {
	// Action for the RBAC policy. Can either be
	// `accessAsExternal` or `accessAsShared`.
	Action interface{}
	// The ID of the `objectType` resource. An
	// `objectType` of `network` returns a network ID and an `objectType` of
	// `qosPolicy` returns a QoS ID.
	ObjectId interface{}
	// The type of the object that the RBAC policy
	// affects. Can either be `qos-policy` or `network`.
	ObjectType interface{}
	// The region in which to obtain the V2 networking client.
	// A networking client is needed to configure a routing entry on a subnet. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new
	// routing entry.
	Region interface{}
	// The ID of the tenant to which the RBAC policy
	// will be enforced.
	TargetTenant interface{}
}
