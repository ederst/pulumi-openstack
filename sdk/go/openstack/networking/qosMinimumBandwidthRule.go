// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package networking

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V2 Neutron QoS minimum bandwidth rule resource within OpenStack.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/networking_qos_minimum_bandwidth_rule_v2.html.markdown.
type QosMinimumBandwidthRule struct {
	s *pulumi.ResourceState
}

// NewQosMinimumBandwidthRule registers a new resource with the given unique name, arguments, and options.
func NewQosMinimumBandwidthRule(ctx *pulumi.Context,
	name string, args *QosMinimumBandwidthRuleArgs, opts ...pulumi.ResourceOpt) (*QosMinimumBandwidthRule, error) {
	if args == nil || args.MinKbps == nil {
		return nil, errors.New("missing required argument 'MinKbps'")
	}
	if args == nil || args.QosPolicyId == nil {
		return nil, errors.New("missing required argument 'QosPolicyId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["direction"] = nil
		inputs["minKbps"] = nil
		inputs["qosPolicyId"] = nil
		inputs["region"] = nil
	} else {
		inputs["direction"] = args.Direction
		inputs["minKbps"] = args.MinKbps
		inputs["qosPolicyId"] = args.QosPolicyId
		inputs["region"] = args.Region
	}
	s, err := ctx.RegisterResource("openstack:networking/qosMinimumBandwidthRule:QosMinimumBandwidthRule", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &QosMinimumBandwidthRule{s: s}, nil
}

// GetQosMinimumBandwidthRule gets an existing QosMinimumBandwidthRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQosMinimumBandwidthRule(ctx *pulumi.Context,
	name string, id pulumi.ID, state *QosMinimumBandwidthRuleState, opts ...pulumi.ResourceOpt) (*QosMinimumBandwidthRule, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["direction"] = state.Direction
		inputs["minKbps"] = state.MinKbps
		inputs["qosPolicyId"] = state.QosPolicyId
		inputs["region"] = state.Region
	}
	s, err := ctx.ReadResource("openstack:networking/qosMinimumBandwidthRule:QosMinimumBandwidthRule", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &QosMinimumBandwidthRule{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *QosMinimumBandwidthRule) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *QosMinimumBandwidthRule) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The direction of traffic. Defaults to "egress". Changing this updates the direction of the
// existing QoS minimum bandwidth rule.
func (r *QosMinimumBandwidthRule) Direction() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["direction"])
}

// The minimum kilobits per second. Changing this updates the min kbps value of the existing
// QoS minimum bandwidth rule.
func (r *QosMinimumBandwidthRule) MinKbps() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minKbps"])
}

// The QoS policy reference. Changing this creates a new QoS minimum bandwidth rule.
func (r *QosMinimumBandwidthRule) QosPolicyId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["qosPolicyId"])
}

// The region in which to obtain the V2 Networking client.
// A Networking client is needed to create a Neutron QoS minimum bandwidth rule. If omitted, the
// `region` argument of the provider is used. Changing this creates a new QoS minimum bandwidth rule.
func (r *QosMinimumBandwidthRule) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// Input properties used for looking up and filtering QosMinimumBandwidthRule resources.
type QosMinimumBandwidthRuleState struct {
	// The direction of traffic. Defaults to "egress". Changing this updates the direction of the
	// existing QoS minimum bandwidth rule.
	Direction interface{}
	// The minimum kilobits per second. Changing this updates the min kbps value of the existing
	// QoS minimum bandwidth rule.
	MinKbps interface{}
	// The QoS policy reference. Changing this creates a new QoS minimum bandwidth rule.
	QosPolicyId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron QoS minimum bandwidth rule. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new QoS minimum bandwidth rule.
	Region interface{}
}

// The set of arguments for constructing a QosMinimumBandwidthRule resource.
type QosMinimumBandwidthRuleArgs struct {
	// The direction of traffic. Defaults to "egress". Changing this updates the direction of the
	// existing QoS minimum bandwidth rule.
	Direction interface{}
	// The minimum kilobits per second. Changing this updates the min kbps value of the existing
	// QoS minimum bandwidth rule.
	MinKbps interface{}
	// The QoS policy reference. Changing this creates a new QoS minimum bandwidth rule.
	QosPolicyId interface{}
	// The region in which to obtain the V2 Networking client.
	// A Networking client is needed to create a Neutron QoS minimum bandwidth rule. If omitted, the
	// `region` argument of the provider is used. Changing this creates a new QoS minimum bandwidth rule.
	Region interface{}
}
