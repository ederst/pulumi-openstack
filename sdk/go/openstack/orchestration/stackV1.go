// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package orchestration

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a V1 stack resource within OpenStack.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/orchestration_stack_v1.html.markdown.
type StackV1 struct {
	s *pulumi.ResourceState
}

// NewStackV1 registers a new resource with the given unique name, arguments, and options.
func NewStackV1(ctx *pulumi.Context,
	name string, args *StackV1Args, opts ...pulumi.ResourceOpt) (*StackV1, error) {
	if args == nil || args.TemplateOpts == nil {
		return nil, errors.New("missing required argument 'TemplateOpts'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["capabilities"] = nil
		inputs["creationTime"] = nil
		inputs["description"] = nil
		inputs["disableRollback"] = nil
		inputs["environmentOpts"] = nil
		inputs["name"] = nil
		inputs["notificationTopics"] = nil
		inputs["outputs"] = nil
		inputs["parameters"] = nil
		inputs["region"] = nil
		inputs["status"] = nil
		inputs["statusReason"] = nil
		inputs["tags"] = nil
		inputs["templateDescription"] = nil
		inputs["templateOpts"] = nil
		inputs["timeout"] = nil
		inputs["updatedTime"] = nil
	} else {
		inputs["capabilities"] = args.Capabilities
		inputs["creationTime"] = args.CreationTime
		inputs["description"] = args.Description
		inputs["disableRollback"] = args.DisableRollback
		inputs["environmentOpts"] = args.EnvironmentOpts
		inputs["name"] = args.Name
		inputs["notificationTopics"] = args.NotificationTopics
		inputs["outputs"] = args.Outputs
		inputs["parameters"] = args.Parameters
		inputs["region"] = args.Region
		inputs["status"] = args.Status
		inputs["statusReason"] = args.StatusReason
		inputs["tags"] = args.Tags
		inputs["templateDescription"] = args.TemplateDescription
		inputs["templateOpts"] = args.TemplateOpts
		inputs["timeout"] = args.Timeout
		inputs["updatedTime"] = args.UpdatedTime
	}
	s, err := ctx.RegisterResource("openstack:orchestration/stackV1:StackV1", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &StackV1{s: s}, nil
}

// GetStackV1 gets an existing StackV1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStackV1(ctx *pulumi.Context,
	name string, id pulumi.ID, state *StackV1State, opts ...pulumi.ResourceOpt) (*StackV1, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["capabilities"] = state.Capabilities
		inputs["creationTime"] = state.CreationTime
		inputs["description"] = state.Description
		inputs["disableRollback"] = state.DisableRollback
		inputs["environmentOpts"] = state.EnvironmentOpts
		inputs["name"] = state.Name
		inputs["notificationTopics"] = state.NotificationTopics
		inputs["outputs"] = state.Outputs
		inputs["parameters"] = state.Parameters
		inputs["region"] = state.Region
		inputs["status"] = state.Status
		inputs["statusReason"] = state.StatusReason
		inputs["tags"] = state.Tags
		inputs["templateDescription"] = state.TemplateDescription
		inputs["templateOpts"] = state.TemplateOpts
		inputs["timeout"] = state.Timeout
		inputs["updatedTime"] = state.UpdatedTime
	}
	s, err := ctx.ReadResource("openstack:orchestration/stackV1:StackV1", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &StackV1{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *StackV1) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *StackV1) ID() pulumi.IDOutput {
	return r.s.ID()
}

// List of stack capabilities for stack.
func (r *StackV1) Capabilities() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["capabilities"])
}

// The date and time when the resource was created. The date
// and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
// For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
// is the time zone as an offset from UTC.
func (r *StackV1) CreationTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["creationTime"])
}

// The description of the stack resource.
func (r *StackV1) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// Enables or disables deletion of all stack
// resources when a stack creation fails. Default is true, meaning all
// resources are not deleted when stack creation fails.
func (r *StackV1) DisableRollback() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["disableRollback"])
}

// Environment key/value pairs to associate with
// the stack which contains details for the environment of the stack.
// Allowed keys: Bin, URL, Files. Changing this updates the existing stack
// Environment Opts.
func (r *StackV1) EnvironmentOpts() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["environmentOpts"])
}

// A unique name for the stack. It must start with an
// alphabetic character. Changing this updates the stack's name.
func (r *StackV1) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// List of notification topics for stack.
func (r *StackV1) NotificationTopics() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["notificationTopics"])
}

// A list of stack outputs.
func (r *StackV1) Outputs() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["outputs"])
}

// User-defined key/value pairs as parameters to pass
// to the template. Changing this updates the existing stack parameters.
func (r *StackV1) Parameters() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["parameters"])
}

// The region in which to create the stack. If
// omitted, the `region` argument of the provider is used. Changing this
// creates a new stack.
func (r *StackV1) Region() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["region"])
}

// The status of the stack.
func (r *StackV1) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// The reason for the current status of the stack.
func (r *StackV1) StatusReason() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["statusReason"])
}

// A list of tags to assosciate with the Stack
func (r *StackV1) Tags() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["tags"])
}

// The description of the stack template.
func (r *StackV1) TemplateDescription() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["templateDescription"])
}

// Template key/value pairs to associate with the
// stack which contains either the template file or url.
// Allowed keys: Bin, URL, Files. Changing this updates the existing stack
// Template Opts.
func (r *StackV1) TemplateOpts() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["templateOpts"])
}

// The timeout for stack action in minutes.
func (r *StackV1) Timeout() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["timeout"])
}

// The date and time when the resource was updated. The date
// and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
// For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
// is the time zone as an offset from UTC.
func (r *StackV1) UpdatedTime() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["updatedTime"])
}

// Input properties used for looking up and filtering StackV1 resources.
type StackV1State struct {
	// List of stack capabilities for stack.
	Capabilities interface{}
	// The date and time when the resource was created. The date
	// and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
	// For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
	// is the time zone as an offset from UTC.
	CreationTime interface{}
	// The description of the stack resource.
	Description interface{}
	// Enables or disables deletion of all stack
	// resources when a stack creation fails. Default is true, meaning all
	// resources are not deleted when stack creation fails.
	DisableRollback interface{}
	// Environment key/value pairs to associate with
	// the stack which contains details for the environment of the stack.
	// Allowed keys: Bin, URL, Files. Changing this updates the existing stack
	// Environment Opts.
	EnvironmentOpts interface{}
	// A unique name for the stack. It must start with an
	// alphabetic character. Changing this updates the stack's name.
	Name interface{}
	// List of notification topics for stack.
	NotificationTopics interface{}
	// A list of stack outputs.
	Outputs interface{}
	// User-defined key/value pairs as parameters to pass
	// to the template. Changing this updates the existing stack parameters.
	Parameters interface{}
	// The region in which to create the stack. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new stack.
	Region interface{}
	// The status of the stack.
	Status interface{}
	// The reason for the current status of the stack.
	StatusReason interface{}
	// A list of tags to assosciate with the Stack
	Tags interface{}
	// The description of the stack template.
	TemplateDescription interface{}
	// Template key/value pairs to associate with the
	// stack which contains either the template file or url.
	// Allowed keys: Bin, URL, Files. Changing this updates the existing stack
	// Template Opts.
	TemplateOpts interface{}
	// The timeout for stack action in minutes.
	Timeout interface{}
	// The date and time when the resource was updated. The date
	// and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
	// For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
	// is the time zone as an offset from UTC.
	UpdatedTime interface{}
}

// The set of arguments for constructing a StackV1 resource.
type StackV1Args struct {
	// List of stack capabilities for stack.
	Capabilities interface{}
	// The date and time when the resource was created. The date
	// and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
	// For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
	// is the time zone as an offset from UTC.
	CreationTime interface{}
	// The description of the stack resource.
	Description interface{}
	// Enables or disables deletion of all stack
	// resources when a stack creation fails. Default is true, meaning all
	// resources are not deleted when stack creation fails.
	DisableRollback interface{}
	// Environment key/value pairs to associate with
	// the stack which contains details for the environment of the stack.
	// Allowed keys: Bin, URL, Files. Changing this updates the existing stack
	// Environment Opts.
	EnvironmentOpts interface{}
	// A unique name for the stack. It must start with an
	// alphabetic character. Changing this updates the stack's name.
	Name interface{}
	// List of notification topics for stack.
	NotificationTopics interface{}
	// A list of stack outputs.
	Outputs interface{}
	// User-defined key/value pairs as parameters to pass
	// to the template. Changing this updates the existing stack parameters.
	Parameters interface{}
	// The region in which to create the stack. If
	// omitted, the `region` argument of the provider is used. Changing this
	// creates a new stack.
	Region interface{}
	// The status of the stack.
	Status interface{}
	// The reason for the current status of the stack.
	StatusReason interface{}
	// A list of tags to assosciate with the Stack
	Tags interface{}
	// The description of the stack template.
	TemplateDescription interface{}
	// Template key/value pairs to associate with the
	// stack which contains either the template file or url.
	// Allowed keys: Bin, URL, Files. Changing this updates the existing stack
	// Template Opts.
	TemplateOpts interface{}
	// The timeout for stack action in minutes.
	Timeout interface{}
	// The date and time when the resource was updated. The date
	// and time stamp format is ISO 8601: CCYY-MM-DDThh:mm:ss±hh:mm
	// For example, 2015-08-27T09:49:58-05:00. The ±hh:mm value, if included,
	// is the time zone as an offset from UTC.
	UpdatedTime interface{}
}
