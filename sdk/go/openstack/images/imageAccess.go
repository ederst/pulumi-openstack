// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package images

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages members for the shared OpenStack Glance V2 Image within the source
// project, which owns the Image.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/images_image_access_v2.html.markdown.
type ImageAccess struct {
	s *pulumi.ResourceState
}

// NewImageAccess registers a new resource with the given unique name, arguments, and options.
func NewImageAccess(ctx *pulumi.Context,
	name string, args *ImageAccessArgs, opts ...pulumi.ResourceOpt) (*ImageAccess, error) {
	if args == nil || args.ImageId == nil {
		return nil, errors.New("missing required argument 'ImageId'")
	}
	if args == nil || args.MemberId == nil {
		return nil, errors.New("missing required argument 'MemberId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["imageId"] = nil
		inputs["memberId"] = nil
		inputs["region"] = nil
		inputs["status"] = nil
	} else {
		inputs["imageId"] = args.ImageId
		inputs["memberId"] = args.MemberId
		inputs["region"] = args.Region
		inputs["status"] = args.Status
	}
	inputs["createdAt"] = nil
	inputs["schema"] = nil
	inputs["updatedAt"] = nil
	s, err := ctx.RegisterResource("openstack:images/imageAccess:ImageAccess", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ImageAccess{s: s}, nil
}

// GetImageAccess gets an existing ImageAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageAccess(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ImageAccessState, opts ...pulumi.ResourceOpt) (*ImageAccess, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["createdAt"] = state.CreatedAt
		inputs["imageId"] = state.ImageId
		inputs["memberId"] = state.MemberId
		inputs["region"] = state.Region
		inputs["schema"] = state.Schema
		inputs["status"] = state.Status
		inputs["updatedAt"] = state.UpdatedAt
	}
	s, err := ctx.ReadResource("openstack:images/imageAccess:ImageAccess", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ImageAccess{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ImageAccess) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ImageAccess) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The date the image access was created.
func (r *ImageAccess) CreatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createdAt"])
}

// The image ID.
func (r *ImageAccess) ImageId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["imageId"])
}

// The member ID, e.g. the target project ID.
func (r *ImageAccess) MemberId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["memberId"])
}

// The region in which to obtain the V2 Glance client.
// A Glance client is needed to manage Image members. If omitted, the `region`
// argument of the provider is used. Changing this creates a new resource.
func (r *ImageAccess) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The member schema.
func (r *ImageAccess) Schema() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["schema"])
}

// The member proposal status. Optional if admin wants to
// force the member proposal acceptance. Can either be `accepted`, `rejected` or
// `pending`. Defaults to `pending`. Foridden for non-admin users.
func (r *ImageAccess) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

// The date the image access was last updated.
func (r *ImageAccess) UpdatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["updatedAt"])
}

// Input properties used for looking up and filtering ImageAccess resources.
type ImageAccessState struct {
	// The date the image access was created.
	CreatedAt interface{}
	// The image ID.
	ImageId interface{}
	// The member ID, e.g. the target project ID.
	MemberId interface{}
	// The region in which to obtain the V2 Glance client.
	// A Glance client is needed to manage Image members. If omitted, the `region`
	// argument of the provider is used. Changing this creates a new resource.
	Region interface{}
	// The member schema.
	Schema interface{}
	// The member proposal status. Optional if admin wants to
	// force the member proposal acceptance. Can either be `accepted`, `rejected` or
	// `pending`. Defaults to `pending`. Foridden for non-admin users.
	Status interface{}
	// The date the image access was last updated.
	UpdatedAt interface{}
}

// The set of arguments for constructing a ImageAccess resource.
type ImageAccessArgs struct {
	// The image ID.
	ImageId interface{}
	// The member ID, e.g. the target project ID.
	MemberId interface{}
	// The region in which to obtain the V2 Glance client.
	// A Glance client is needed to manage Image members. If omitted, the `region`
	// argument of the provider is used. Changing this creates a new resource.
	Region interface{}
	// The member proposal status. Optional if admin wants to
	// force the member proposal acceptance. Can either be `accepted`, `rejected` or
	// `pending`. Defaults to `pending`. Foridden for non-admin users.
	Status interface{}
}
