// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package blockstorage

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Use this data source to get information about an existing volume.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/d/blockstorage_volume_v2.html.markdown.
func LookupVolumeV2(ctx *pulumi.Context, args *GetVolumeV2Args) (*GetVolumeV2Result, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["bootable"] = args.Bootable
		inputs["metadata"] = args.Metadata
		inputs["name"] = args.Name
		inputs["region"] = args.Region
		inputs["status"] = args.Status
		inputs["volumeType"] = args.VolumeType
	}
	outputs, err := ctx.Invoke("openstack:blockstorage/getVolumeV2:getVolumeV2", inputs)
	if err != nil {
		return nil, err
	}
	return &GetVolumeV2Result{
		Bootable: outputs["bootable"],
		Metadata: outputs["metadata"],
		Name: outputs["name"],
		Region: outputs["region"],
		Size: outputs["size"],
		SourceVolumeId: outputs["sourceVolumeId"],
		Status: outputs["status"],
		VolumeType: outputs["volumeType"],
		Id: outputs["id"],
	}, nil
}

// A collection of arguments for invoking getVolumeV2.
type GetVolumeV2Args struct {
	Bootable interface{}
	// Metadata key/value pairs associated with the volume.
	Metadata interface{}
	// The name of the volume.
	Name interface{}
	// The region in which to obtain the V2 Block Storage
	// client. If omitted, the `region` argument of the provider is used.
	Region interface{}
	// The status of the volume.
	Status interface{}
	VolumeType interface{}
}

// A collection of values returned by getVolumeV2.
type GetVolumeV2Result struct {
	// Indicates if the volume is bootable.
	Bootable interface{}
	// See Argument Reference above.
	Metadata interface{}
	// See Argument Reference above.
	Name interface{}
	// See Argument Reference above.
	Region interface{}
	// The size of the volume in GBs.
	Size interface{}
	// The ID of the volume from which the current volume was created.
	SourceVolumeId interface{}
	// See Argument Reference above.
	Status interface{}
	// The type of the volume.
	VolumeType interface{}
	// id is the provider-assigned unique ID for this managed resource.
	Id interface{}
}
