// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.OpenStack.Compute
{
    /// <summary>
    /// Manages a V2 VM instance resource within OpenStack.
    /// 
    /// 
    /// ## Importing instances
    /// 
    /// Importing instances can be tricky, since the nova api does not offer all
    /// information provided at creation time for later retrieval.
    /// Network interface attachment order, and number and sizes of ephemeral
    /// disks are examples of this.
    /// 
    /// ### Importing an instance with multiple emphemeral disks
    /// 
    /// The importer cannot read the emphemeral disk configuration
    /// of an instance, so just specify image_id as in the configuration 
    /// of the basic instance example.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-openstack/blob/master/website/docs/r/compute_instance_v2.html.markdown.
    /// </summary>
    public partial class Instance : Pulumi.CustomResource
    {
        /// <summary>
        /// The first detected Fixed IPv4 address.
        /// </summary>
        [Output("accessIpV4")]
        public Output<string> AccessIpV4 { get; private set; } = null!;

        /// <summary>
        /// The first detected Fixed IPv6 address.
        /// </summary>
        [Output("accessIpV6")]
        public Output<string> AccessIpV6 { get; private set; } = null!;

        /// <summary>
        /// The administrative password to assign to the server.
        /// Changing this changes the root password on the existing server.
        /// </summary>
        [Output("adminPass")]
        public Output<string?> AdminPass { get; private set; } = null!;

        [Output("allMetadata")]
        public Output<ImmutableDictionary<string, object>> AllMetadata { get; private set; } = null!;

        /// <summary>
        /// The collection of tags assigned on the instance, which have
        /// been explicitly and implicitly added.
        /// </summary>
        [Output("allTags")]
        public Output<ImmutableArray<string>> AllTags { get; private set; } = null!;

        /// <summary>
        /// The availability zone in which to create
        /// the server. Changing this creates a new server.
        /// </summary>
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// Configuration of block devices. The block_device
        /// structure is documented below. Changing this creates a new server.
        /// You can specify multiple block devices which will create an instance with
        /// multiple disks. This configuration is very flexible, so please see the
        /// following [reference](https://docs.openstack.org/nova/latest/user/block-device-mapping.html)
        /// for more information.
        /// </summary>
        [Output("blockDevices")]
        public Output<ImmutableArray<Outputs.InstanceBlockDevices>> BlockDevices { get; private set; } = null!;

        /// <summary>
        /// Whether to use the config_drive feature to
        /// configure the instance. Changing this creates a new server.
        /// </summary>
        [Output("configDrive")]
        public Output<bool?> ConfigDrive { get; private set; } = null!;

        /// <summary>
        /// The flavor ID of
        /// the desired flavor for the server. Changing this resizes the existing server.
        /// </summary>
        [Output("flavorId")]
        public Output<string> FlavorId { get; private set; } = null!;

        /// <summary>
        /// The name of the
        /// desired flavor for the server. Changing this resizes the existing server.
        /// </summary>
        [Output("flavorName")]
        public Output<string> FlavorName { get; private set; } = null!;

        /// <summary>
        /// Whether to force the OpenStack instance to be
        /// forcefully deleted. This is useful for environments that have reclaim / soft
        /// deletion enabled.
        /// </summary>
        [Output("forceDelete")]
        public Output<bool?> ForceDelete { get; private set; } = null!;

        /// <summary>
        /// (Optional; Required if `image_name` is empty and not booting
        /// from a volume. Do not specify if booting from a volume.) The image ID of
        /// the desired image for the server. Changing this creates a new server.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// (Optional; Required if `image_id` is empty and not booting
        /// from a volume. Do not specify if booting from a volume.) The name of the
        /// desired image for the server. Changing this creates a new server.
        /// </summary>
        [Output("imageName")]
        public Output<string> ImageName { get; private set; } = null!;

        /// <summary>
        /// The name of a key pair to put on the server. The key
        /// pair must already be created and associated with the tenant's account.
        /// Changing this creates a new server.
        /// </summary>
        [Output("keyPair")]
        public Output<string?> KeyPair { get; private set; } = null!;

        /// <summary>
        /// Metadata key/value pairs to make available from
        /// within the instance. Changing this updates the existing server metadata.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, object>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The human-readable
        /// name of the network. Changing this creates a new server.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An array of one or more networks to attach to the
        /// instance. The network object structure is documented below. Changing this
        /// creates a new server.
        /// </summary>
        [Output("networks")]
        public Output<ImmutableArray<Outputs.InstanceNetworks>> Networks { get; private set; } = null!;

        /// <summary>
        /// Customize the personality of an instance by
        /// defining one or more files and their contents. The personality structure
        /// is described below.
        /// </summary>
        [Output("personalities")]
        public Output<ImmutableArray<Outputs.InstancePersonalities>> Personalities { get; private set; } = null!;

        /// <summary>
        /// Provide the VM state. Only 'active' and 'shutoff'
        /// are supported values. *Note*: If the initial power_state is the shutoff
        /// the VM will be stopped immediately after build and the provisioners like
        /// remote-exec or files are not supported.
        /// </summary>
        [Output("powerState")]
        public Output<string?> PowerState { get; private set; } = null!;

        /// <summary>
        /// The region in which to create the server instance. If
        /// omitted, the `region` argument of the provider is used. Changing this
        /// creates a new server.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Provide the Nova scheduler with hints on how
        /// the instance should be launched. The available hints are described below.
        /// </summary>
        [Output("schedulerHints")]
        public Output<ImmutableArray<Outputs.InstanceSchedulerHints>> SchedulerHints { get; private set; } = null!;

        /// <summary>
        /// An array of one or more security group names
        /// or ids to associate with the server. Changing this results in adding/removing
        /// security groups from the existing server. *Note*: When attaching the
        /// instance to networks using Ports, place the security groups on the Port
        /// and not the instance.
        /// </summary>
        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        /// <summary>
        /// Whether to try stop instance gracefully
        /// before destroying it, thus giving chance for guest OS daemons to stop correctly.
        /// If instance doesn't stop within timeout, it will be destroyed anyway.
        /// </summary>
        [Output("stopBeforeDestroy")]
        public Output<bool?> StopBeforeDestroy { get; private set; } = null!;

        /// <summary>
        /// A set of string tags for the instance. Changing this
        /// updates the existing instance tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The user data to provide when launching the instance.
        /// Changing this creates a new server.
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        /// <summary>
        /// Map of additional vendor-specific options.
        /// Supported options are described below.
        /// </summary>
        [Output("vendorOptions")]
        public Output<Outputs.InstanceVendorOptions?> VendorOptions { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs? args = null, CustomResourceOptions? options = null)
            : base("openstack:compute/instance:Instance", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("openstack:compute/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The first detected Fixed IPv4 address.
        /// </summary>
        [Input("accessIpV4")]
        public Input<string>? AccessIpV4 { get; set; }

        /// <summary>
        /// The first detected Fixed IPv6 address.
        /// </summary>
        [Input("accessIpV6")]
        public Input<string>? AccessIpV6 { get; set; }

        /// <summary>
        /// The administrative password to assign to the server.
        /// Changing this changes the root password on the existing server.
        /// </summary>
        [Input("adminPass")]
        public Input<string>? AdminPass { get; set; }

        /// <summary>
        /// The availability zone in which to create
        /// the server. Changing this creates a new server.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("blockDevices")]
        private InputList<Inputs.InstanceBlockDevicesArgs>? _blockDevices;

        /// <summary>
        /// Configuration of block devices. The block_device
        /// structure is documented below. Changing this creates a new server.
        /// You can specify multiple block devices which will create an instance with
        /// multiple disks. This configuration is very flexible, so please see the
        /// following [reference](https://docs.openstack.org/nova/latest/user/block-device-mapping.html)
        /// for more information.
        /// </summary>
        public InputList<Inputs.InstanceBlockDevicesArgs> BlockDevices
        {
            get => _blockDevices ?? (_blockDevices = new InputList<Inputs.InstanceBlockDevicesArgs>());
            set => _blockDevices = value;
        }

        /// <summary>
        /// Whether to use the config_drive feature to
        /// configure the instance. Changing this creates a new server.
        /// </summary>
        [Input("configDrive")]
        public Input<bool>? ConfigDrive { get; set; }

        /// <summary>
        /// The flavor ID of
        /// the desired flavor for the server. Changing this resizes the existing server.
        /// </summary>
        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        /// <summary>
        /// The name of the
        /// desired flavor for the server. Changing this resizes the existing server.
        /// </summary>
        [Input("flavorName")]
        public Input<string>? FlavorName { get; set; }

        /// <summary>
        /// Whether to force the OpenStack instance to be
        /// forcefully deleted. This is useful for environments that have reclaim / soft
        /// deletion enabled.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// (Optional; Required if `image_name` is empty and not booting
        /// from a volume. Do not specify if booting from a volume.) The image ID of
        /// the desired image for the server. Changing this creates a new server.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// (Optional; Required if `image_id` is empty and not booting
        /// from a volume. Do not specify if booting from a volume.) The name of the
        /// desired image for the server. Changing this creates a new server.
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        /// <summary>
        /// The name of a key pair to put on the server. The key
        /// pair must already be created and associated with the tenant's account.
        /// Changing this creates a new server.
        /// </summary>
        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        [Input("metadata")]
        private InputMap<object>? _metadata;

        /// <summary>
        /// Metadata key/value pairs to make available from
        /// within the instance. Changing this updates the existing server metadata.
        /// </summary>
        public InputMap<object> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<object>());
            set => _metadata = value;
        }

        /// <summary>
        /// The human-readable
        /// name of the network. Changing this creates a new server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.InstanceNetworksArgs>? _networks;

        /// <summary>
        /// An array of one or more networks to attach to the
        /// instance. The network object structure is documented below. Changing this
        /// creates a new server.
        /// </summary>
        public InputList<Inputs.InstanceNetworksArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.InstanceNetworksArgs>());
            set => _networks = value;
        }

        [Input("personalities")]
        private InputList<Inputs.InstancePersonalitiesArgs>? _personalities;

        /// <summary>
        /// Customize the personality of an instance by
        /// defining one or more files and their contents. The personality structure
        /// is described below.
        /// </summary>
        public InputList<Inputs.InstancePersonalitiesArgs> Personalities
        {
            get => _personalities ?? (_personalities = new InputList<Inputs.InstancePersonalitiesArgs>());
            set => _personalities = value;
        }

        /// <summary>
        /// Provide the VM state. Only 'active' and 'shutoff'
        /// are supported values. *Note*: If the initial power_state is the shutoff
        /// the VM will be stopped immediately after build and the provisioners like
        /// remote-exec or files are not supported.
        /// </summary>
        [Input("powerState")]
        public Input<string>? PowerState { get; set; }

        /// <summary>
        /// The region in which to create the server instance. If
        /// omitted, the `region` argument of the provider is used. Changing this
        /// creates a new server.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("schedulerHints")]
        private InputList<Inputs.InstanceSchedulerHintsArgs>? _schedulerHints;

        /// <summary>
        /// Provide the Nova scheduler with hints on how
        /// the instance should be launched. The available hints are described below.
        /// </summary>
        public InputList<Inputs.InstanceSchedulerHintsArgs> SchedulerHints
        {
            get => _schedulerHints ?? (_schedulerHints = new InputList<Inputs.InstanceSchedulerHintsArgs>());
            set => _schedulerHints = value;
        }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// An array of one or more security group names
        /// or ids to associate with the server. Changing this results in adding/removing
        /// security groups from the existing server. *Note*: When attaching the
        /// instance to networks using Ports, place the security groups on the Port
        /// and not the instance.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// Whether to try stop instance gracefully
        /// before destroying it, thus giving chance for guest OS daemons to stop correctly.
        /// If instance doesn't stop within timeout, it will be destroyed anyway.
        /// </summary>
        [Input("stopBeforeDestroy")]
        public Input<bool>? StopBeforeDestroy { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A set of string tags for the instance. Changing this
        /// updates the existing instance tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The user data to provide when launching the instance.
        /// Changing this creates a new server.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// Map of additional vendor-specific options.
        /// Supported options are described below.
        /// </summary>
        [Input("vendorOptions")]
        public Input<Inputs.InstanceVendorOptionsArgs>? VendorOptions { get; set; }

        public InstanceArgs()
        {
        }
    }

    public sealed class InstanceState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The first detected Fixed IPv4 address.
        /// </summary>
        [Input("accessIpV4")]
        public Input<string>? AccessIpV4 { get; set; }

        /// <summary>
        /// The first detected Fixed IPv6 address.
        /// </summary>
        [Input("accessIpV6")]
        public Input<string>? AccessIpV6 { get; set; }

        /// <summary>
        /// The administrative password to assign to the server.
        /// Changing this changes the root password on the existing server.
        /// </summary>
        [Input("adminPass")]
        public Input<string>? AdminPass { get; set; }

        [Input("allMetadata")]
        private InputMap<object>? _allMetadata;
        public InputMap<object> AllMetadata
        {
            get => _allMetadata ?? (_allMetadata = new InputMap<object>());
            set => _allMetadata = value;
        }

        [Input("allTags")]
        private InputList<string>? _allTags;

        /// <summary>
        /// The collection of tags assigned on the instance, which have
        /// been explicitly and implicitly added.
        /// </summary>
        public InputList<string> AllTags
        {
            get => _allTags ?? (_allTags = new InputList<string>());
            set => _allTags = value;
        }

        /// <summary>
        /// The availability zone in which to create
        /// the server. Changing this creates a new server.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("blockDevices")]
        private InputList<Inputs.InstanceBlockDevicesGetArgs>? _blockDevices;

        /// <summary>
        /// Configuration of block devices. The block_device
        /// structure is documented below. Changing this creates a new server.
        /// You can specify multiple block devices which will create an instance with
        /// multiple disks. This configuration is very flexible, so please see the
        /// following [reference](https://docs.openstack.org/nova/latest/user/block-device-mapping.html)
        /// for more information.
        /// </summary>
        public InputList<Inputs.InstanceBlockDevicesGetArgs> BlockDevices
        {
            get => _blockDevices ?? (_blockDevices = new InputList<Inputs.InstanceBlockDevicesGetArgs>());
            set => _blockDevices = value;
        }

        /// <summary>
        /// Whether to use the config_drive feature to
        /// configure the instance. Changing this creates a new server.
        /// </summary>
        [Input("configDrive")]
        public Input<bool>? ConfigDrive { get; set; }

        /// <summary>
        /// The flavor ID of
        /// the desired flavor for the server. Changing this resizes the existing server.
        /// </summary>
        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        /// <summary>
        /// The name of the
        /// desired flavor for the server. Changing this resizes the existing server.
        /// </summary>
        [Input("flavorName")]
        public Input<string>? FlavorName { get; set; }

        /// <summary>
        /// Whether to force the OpenStack instance to be
        /// forcefully deleted. This is useful for environments that have reclaim / soft
        /// deletion enabled.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// (Optional; Required if `image_name` is empty and not booting
        /// from a volume. Do not specify if booting from a volume.) The image ID of
        /// the desired image for the server. Changing this creates a new server.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// (Optional; Required if `image_id` is empty and not booting
        /// from a volume. Do not specify if booting from a volume.) The name of the
        /// desired image for the server. Changing this creates a new server.
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        /// <summary>
        /// The name of a key pair to put on the server. The key
        /// pair must already be created and associated with the tenant's account.
        /// Changing this creates a new server.
        /// </summary>
        [Input("keyPair")]
        public Input<string>? KeyPair { get; set; }

        [Input("metadata")]
        private InputMap<object>? _metadata;

        /// <summary>
        /// Metadata key/value pairs to make available from
        /// within the instance. Changing this updates the existing server metadata.
        /// </summary>
        public InputMap<object> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<object>());
            set => _metadata = value;
        }

        /// <summary>
        /// The human-readable
        /// name of the network. Changing this creates a new server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networks")]
        private InputList<Inputs.InstanceNetworksGetArgs>? _networks;

        /// <summary>
        /// An array of one or more networks to attach to the
        /// instance. The network object structure is documented below. Changing this
        /// creates a new server.
        /// </summary>
        public InputList<Inputs.InstanceNetworksGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.InstanceNetworksGetArgs>());
            set => _networks = value;
        }

        [Input("personalities")]
        private InputList<Inputs.InstancePersonalitiesGetArgs>? _personalities;

        /// <summary>
        /// Customize the personality of an instance by
        /// defining one or more files and their contents. The personality structure
        /// is described below.
        /// </summary>
        public InputList<Inputs.InstancePersonalitiesGetArgs> Personalities
        {
            get => _personalities ?? (_personalities = new InputList<Inputs.InstancePersonalitiesGetArgs>());
            set => _personalities = value;
        }

        /// <summary>
        /// Provide the VM state. Only 'active' and 'shutoff'
        /// are supported values. *Note*: If the initial power_state is the shutoff
        /// the VM will be stopped immediately after build and the provisioners like
        /// remote-exec or files are not supported.
        /// </summary>
        [Input("powerState")]
        public Input<string>? PowerState { get; set; }

        /// <summary>
        /// The region in which to create the server instance. If
        /// omitted, the `region` argument of the provider is used. Changing this
        /// creates a new server.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("schedulerHints")]
        private InputList<Inputs.InstanceSchedulerHintsGetArgs>? _schedulerHints;

        /// <summary>
        /// Provide the Nova scheduler with hints on how
        /// the instance should be launched. The available hints are described below.
        /// </summary>
        public InputList<Inputs.InstanceSchedulerHintsGetArgs> SchedulerHints
        {
            get => _schedulerHints ?? (_schedulerHints = new InputList<Inputs.InstanceSchedulerHintsGetArgs>());
            set => _schedulerHints = value;
        }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// An array of one or more security group names
        /// or ids to associate with the server. Changing this results in adding/removing
        /// security groups from the existing server. *Note*: When attaching the
        /// instance to networks using Ports, place the security groups on the Port
        /// and not the instance.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// Whether to try stop instance gracefully
        /// before destroying it, thus giving chance for guest OS daemons to stop correctly.
        /// If instance doesn't stop within timeout, it will be destroyed anyway.
        /// </summary>
        [Input("stopBeforeDestroy")]
        public Input<bool>? StopBeforeDestroy { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A set of string tags for the instance. Changing this
        /// updates the existing instance tags.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The user data to provide when launching the instance.
        /// Changing this creates a new server.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// Map of additional vendor-specific options.
        /// Supported options are described below.
        /// </summary>
        [Input("vendorOptions")]
        public Input<Inputs.InstanceVendorOptionsGetArgs>? VendorOptions { get; set; }

        public InstanceState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class InstanceBlockDevicesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The boot index of the volume. It defaults to 0.
        /// Changing this creates a new server.
        /// </summary>
        [Input("bootIndex")]
        public Input<int>? BootIndex { get; set; }

        /// <summary>
        /// Delete the volume / block device upon
        /// termination of the instance. Defaults to false. Changing this creates a
        /// new server.
        /// </summary>
        [Input("deleteOnTermination")]
        public Input<bool>? DeleteOnTermination { get; set; }

        /// <summary>
        /// The type that gets created. Possible values
        /// are "volume" and "local". Changing this creates a new server.
        /// </summary>
        [Input("destinationType")]
        public Input<string>? DestinationType { get; set; }

        /// <summary>
        /// The low-level device type that will be used. Most
        /// common thing is to leave this empty. Changing this creates a new server.
        /// </summary>
        [Input("deviceType")]
        public Input<string>? DeviceType { get; set; }

        /// <summary>
        /// The low-level disk bus that will be used. Most common
        /// thing is to leave this empty. Changing this creates a new server.
        /// </summary>
        [Input("diskBus")]
        public Input<string>? DiskBus { get; set; }

        [Input("guestFormat")]
        public Input<string>? GuestFormat { get; set; }

        /// <summary>
        /// The source type of the device. Must be one of
        /// "blank", "image", "volume", or "snapshot". Changing this creates a new
        /// server.
        /// </summary>
        [Input("sourceType", required: true)]
        public Input<string> SourceType { get; set; } = null!;

        /// <summary>
        /// The UUID of
        /// the image, volume, or snapshot. Changing this creates a new server.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// The size of the volume to create (in gigabytes). Required
        /// in the following combinations: source=image and destination=volume,
        /// source=blank and destination=local, and source=blank and destination=volume.
        /// Changing this creates a new server.
        /// </summary>
        [Input("volumeSize")]
        public Input<int>? VolumeSize { get; set; }

        /// <summary>
        /// The volume type that will be used, for example SSD
        /// or HDD storage. The available options depend on how your specific OpenStack
        /// cloud is configured and what classes of storage are provided. Changing this
        /// creates a new server.
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public InstanceBlockDevicesArgs()
        {
        }
    }

    public sealed class InstanceBlockDevicesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The boot index of the volume. It defaults to 0.
        /// Changing this creates a new server.
        /// </summary>
        [Input("bootIndex")]
        public Input<int>? BootIndex { get; set; }

        /// <summary>
        /// Delete the volume / block device upon
        /// termination of the instance. Defaults to false. Changing this creates a
        /// new server.
        /// </summary>
        [Input("deleteOnTermination")]
        public Input<bool>? DeleteOnTermination { get; set; }

        /// <summary>
        /// The type that gets created. Possible values
        /// are "volume" and "local". Changing this creates a new server.
        /// </summary>
        [Input("destinationType")]
        public Input<string>? DestinationType { get; set; }

        /// <summary>
        /// The low-level device type that will be used. Most
        /// common thing is to leave this empty. Changing this creates a new server.
        /// </summary>
        [Input("deviceType")]
        public Input<string>? DeviceType { get; set; }

        /// <summary>
        /// The low-level disk bus that will be used. Most common
        /// thing is to leave this empty. Changing this creates a new server.
        /// </summary>
        [Input("diskBus")]
        public Input<string>? DiskBus { get; set; }

        [Input("guestFormat")]
        public Input<string>? GuestFormat { get; set; }

        /// <summary>
        /// The source type of the device. Must be one of
        /// "blank", "image", "volume", or "snapshot". Changing this creates a new
        /// server.
        /// </summary>
        [Input("sourceType", required: true)]
        public Input<string> SourceType { get; set; } = null!;

        /// <summary>
        /// The UUID of
        /// the image, volume, or snapshot. Changing this creates a new server.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        /// <summary>
        /// The size of the volume to create (in gigabytes). Required
        /// in the following combinations: source=image and destination=volume,
        /// source=blank and destination=local, and source=blank and destination=volume.
        /// Changing this creates a new server.
        /// </summary>
        [Input("volumeSize")]
        public Input<int>? VolumeSize { get; set; }

        /// <summary>
        /// The volume type that will be used, for example SSD
        /// or HDD storage. The available options depend on how your specific OpenStack
        /// cloud is configured and what classes of storage are provided. Changing this
        /// creates a new server.
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public InstanceBlockDevicesGetArgs()
        {
        }
    }

    public sealed class InstanceNetworksArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies if this network should be used for
        /// provisioning access. Accepts true or false. Defaults to false.
        /// </summary>
        [Input("accessNetwork")]
        public Input<bool>? AccessNetwork { get; set; }

        /// <summary>
        /// Specifies a fixed IPv4 address to be used on this
        /// network. Changing this creates a new server.
        /// </summary>
        [Input("fixedIpV4")]
        public Input<string>? FixedIpV4 { get; set; }

        [Input("fixedIpV6")]
        public Input<string>? FixedIpV6 { get; set; }

        [Input("mac")]
        public Input<string>? Mac { get; set; }

        /// <summary>
        /// The human-readable
        /// name of the network. Changing this creates a new server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The port UUID of a
        /// network to attach to the server. Changing this creates a new server.
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        /// <summary>
        /// The UUID of
        /// the image, volume, or snapshot. Changing this creates a new server.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public InstanceNetworksArgs()
        {
        }
    }

    public sealed class InstanceNetworksGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies if this network should be used for
        /// provisioning access. Accepts true or false. Defaults to false.
        /// </summary>
        [Input("accessNetwork")]
        public Input<bool>? AccessNetwork { get; set; }

        /// <summary>
        /// Specifies a fixed IPv4 address to be used on this
        /// network. Changing this creates a new server.
        /// </summary>
        [Input("fixedIpV4")]
        public Input<string>? FixedIpV4 { get; set; }

        [Input("fixedIpV6")]
        public Input<string>? FixedIpV6 { get; set; }

        [Input("mac")]
        public Input<string>? Mac { get; set; }

        /// <summary>
        /// The human-readable
        /// name of the network. Changing this creates a new server.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The port UUID of a
        /// network to attach to the server. Changing this creates a new server.
        /// </summary>
        [Input("port")]
        public Input<string>? Port { get; set; }

        /// <summary>
        /// The UUID of
        /// the image, volume, or snapshot. Changing this creates a new server.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public InstanceNetworksGetArgs()
        {
        }
    }

    public sealed class InstancePersonalitiesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The contents of the file. Limited to 255 bytes.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// The absolute path of the destination file.
        /// </summary>
        [Input("file", required: true)]
        public Input<string> File { get; set; } = null!;

        public InstancePersonalitiesArgs()
        {
        }
    }

    public sealed class InstancePersonalitiesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The contents of the file. Limited to 255 bytes.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// The absolute path of the destination file.
        /// </summary>
        [Input("file", required: true)]
        public Input<string> File { get; set; } = null!;

        public InstancePersonalitiesGetArgs()
        {
        }
    }

    public sealed class InstanceSchedulerHintsArgs : Pulumi.ResourceArgs
    {
        [Input("additionalProperties")]
        private InputMap<object>? _additionalProperties;

        /// <summary>
        /// Arbitrary key/value pairs of additional
        /// properties to pass to the scheduler.
        /// </summary>
        public InputMap<object> AdditionalProperties
        {
            get => _additionalProperties ?? (_additionalProperties = new InputMap<object>());
            set => _additionalProperties = value;
        }

        /// <summary>
        /// An IP Address in CIDR form. The instance
        /// will be placed on a compute node that is in the same subnet.
        /// </summary>
        [Input("buildNearHostIp")]
        public Input<string>? BuildNearHostIp { get; set; }

        [Input("differentHosts")]
        private InputList<string>? _differentHosts;

        /// <summary>
        /// A list of instance UUIDs. The instance will
        /// be scheduled on a different host than all other instances.
        /// </summary>
        public InputList<string> DifferentHosts
        {
            get => _differentHosts ?? (_differentHosts = new InputList<string>());
            set => _differentHosts = value;
        }

        /// <summary>
        /// A UUID of a Server Group. The instance will be placed
        /// into that group.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        [Input("queries")]
        private InputList<string>? _queries;

        /// <summary>
        /// A conditional query that a compute node must pass in
        /// order to host an instance. The query must use the `JsonFilter` syntax
        /// which is described
        /// [here](https://docs.openstack.org/nova/latest/admin/configuration/schedulers.html#jsonfilter).
        /// At this time, only simple queries are supported. Compound queries using
        /// `and`, `or`, or `not` are not supported. An example of a simple query is:
        /// </summary>
        public InputList<string> Queries
        {
            get => _queries ?? (_queries = new InputList<string>());
            set => _queries = value;
        }

        [Input("sameHosts")]
        private InputList<string>? _sameHosts;

        /// <summary>
        /// A list of instance UUIDs. The instance will be
        /// scheduled on the same host of those specified.
        /// </summary>
        public InputList<string> SameHosts
        {
            get => _sameHosts ?? (_sameHosts = new InputList<string>());
            set => _sameHosts = value;
        }

        /// <summary>
        /// The name of a cell to host the instance.
        /// </summary>
        [Input("targetCell")]
        public Input<string>? TargetCell { get; set; }

        public InstanceSchedulerHintsArgs()
        {
        }
    }

    public sealed class InstanceSchedulerHintsGetArgs : Pulumi.ResourceArgs
    {
        [Input("additionalProperties")]
        private InputMap<object>? _additionalProperties;

        /// <summary>
        /// Arbitrary key/value pairs of additional
        /// properties to pass to the scheduler.
        /// </summary>
        public InputMap<object> AdditionalProperties
        {
            get => _additionalProperties ?? (_additionalProperties = new InputMap<object>());
            set => _additionalProperties = value;
        }

        /// <summary>
        /// An IP Address in CIDR form. The instance
        /// will be placed on a compute node that is in the same subnet.
        /// </summary>
        [Input("buildNearHostIp")]
        public Input<string>? BuildNearHostIp { get; set; }

        [Input("differentHosts")]
        private InputList<string>? _differentHosts;

        /// <summary>
        /// A list of instance UUIDs. The instance will
        /// be scheduled on a different host than all other instances.
        /// </summary>
        public InputList<string> DifferentHosts
        {
            get => _differentHosts ?? (_differentHosts = new InputList<string>());
            set => _differentHosts = value;
        }

        /// <summary>
        /// A UUID of a Server Group. The instance will be placed
        /// into that group.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        [Input("queries")]
        private InputList<string>? _queries;

        /// <summary>
        /// A conditional query that a compute node must pass in
        /// order to host an instance. The query must use the `JsonFilter` syntax
        /// which is described
        /// [here](https://docs.openstack.org/nova/latest/admin/configuration/schedulers.html#jsonfilter).
        /// At this time, only simple queries are supported. Compound queries using
        /// `and`, `or`, or `not` are not supported. An example of a simple query is:
        /// </summary>
        public InputList<string> Queries
        {
            get => _queries ?? (_queries = new InputList<string>());
            set => _queries = value;
        }

        [Input("sameHosts")]
        private InputList<string>? _sameHosts;

        /// <summary>
        /// A list of instance UUIDs. The instance will be
        /// scheduled on the same host of those specified.
        /// </summary>
        public InputList<string> SameHosts
        {
            get => _sameHosts ?? (_sameHosts = new InputList<string>());
            set => _sameHosts = value;
        }

        /// <summary>
        /// The name of a cell to host the instance.
        /// </summary>
        [Input("targetCell")]
        public Input<string>? TargetCell { get; set; }

        public InstanceSchedulerHintsGetArgs()
        {
        }
    }

    public sealed class InstanceVendorOptionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Boolean to control whether
        /// to ignore manual confirmation of the instance resizing. This can be helpful
        /// to work with some OpenStack clouds which automatically confirm resizing of
        /// instances after some timeout.
        /// </summary>
        [Input("ignoreResizeConfirmation")]
        public Input<bool>? IgnoreResizeConfirmation { get; set; }

        public InstanceVendorOptionsArgs()
        {
        }
    }

    public sealed class InstanceVendorOptionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Boolean to control whether
        /// to ignore manual confirmation of the instance resizing. This can be helpful
        /// to work with some OpenStack clouds which automatically confirm resizing of
        /// instances after some timeout.
        /// </summary>
        [Input("ignoreResizeConfirmation")]
        public Input<bool>? IgnoreResizeConfirmation { get; set; }

        public InstanceVendorOptionsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class InstanceBlockDevices
    {
        /// <summary>
        /// The boot index of the volume. It defaults to 0.
        /// Changing this creates a new server.
        /// </summary>
        public readonly int? BootIndex;
        /// <summary>
        /// Delete the volume / block device upon
        /// termination of the instance. Defaults to false. Changing this creates a
        /// new server.
        /// </summary>
        public readonly bool? DeleteOnTermination;
        /// <summary>
        /// The type that gets created. Possible values
        /// are "volume" and "local". Changing this creates a new server.
        /// </summary>
        public readonly string? DestinationType;
        /// <summary>
        /// The low-level device type that will be used. Most
        /// common thing is to leave this empty. Changing this creates a new server.
        /// </summary>
        public readonly string? DeviceType;
        /// <summary>
        /// The low-level disk bus that will be used. Most common
        /// thing is to leave this empty. Changing this creates a new server.
        /// </summary>
        public readonly string? DiskBus;
        public readonly string? GuestFormat;
        /// <summary>
        /// The source type of the device. Must be one of
        /// "blank", "image", "volume", or "snapshot". Changing this creates a new
        /// server.
        /// </summary>
        public readonly string SourceType;
        /// <summary>
        /// The UUID of
        /// the image, volume, or snapshot. Changing this creates a new server.
        /// </summary>
        public readonly string? Uuid;
        /// <summary>
        /// The size of the volume to create (in gigabytes). Required
        /// in the following combinations: source=image and destination=volume,
        /// source=blank and destination=local, and source=blank and destination=volume.
        /// Changing this creates a new server.
        /// </summary>
        public readonly int? VolumeSize;
        /// <summary>
        /// The volume type that will be used, for example SSD
        /// or HDD storage. The available options depend on how your specific OpenStack
        /// cloud is configured and what classes of storage are provided. Changing this
        /// creates a new server.
        /// </summary>
        public readonly string? VolumeType;

        [OutputConstructor]
        private InstanceBlockDevices(
            int? bootIndex,
            bool? deleteOnTermination,
            string? destinationType,
            string? deviceType,
            string? diskBus,
            string? guestFormat,
            string sourceType,
            string? uuid,
            int? volumeSize,
            string? volumeType)
        {
            BootIndex = bootIndex;
            DeleteOnTermination = deleteOnTermination;
            DestinationType = destinationType;
            DeviceType = deviceType;
            DiskBus = diskBus;
            GuestFormat = guestFormat;
            SourceType = sourceType;
            Uuid = uuid;
            VolumeSize = volumeSize;
            VolumeType = volumeType;
        }
    }

    [OutputType]
    public sealed class InstanceNetworks
    {
        /// <summary>
        /// Specifies if this network should be used for
        /// provisioning access. Accepts true or false. Defaults to false.
        /// </summary>
        public readonly bool? AccessNetwork;
        /// <summary>
        /// Specifies a fixed IPv4 address to be used on this
        /// network. Changing this creates a new server.
        /// </summary>
        public readonly string FixedIpV4;
        public readonly string FixedIpV6;
        public readonly string Mac;
        /// <summary>
        /// The human-readable
        /// name of the network. Changing this creates a new server.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The port UUID of a
        /// network to attach to the server. Changing this creates a new server.
        /// </summary>
        public readonly string Port;
        /// <summary>
        /// The UUID of
        /// the image, volume, or snapshot. Changing this creates a new server.
        /// </summary>
        public readonly string Uuid;

        [OutputConstructor]
        private InstanceNetworks(
            bool? accessNetwork,
            string fixedIpV4,
            string fixedIpV6,
            string mac,
            string name,
            string port,
            string uuid)
        {
            AccessNetwork = accessNetwork;
            FixedIpV4 = fixedIpV4;
            FixedIpV6 = fixedIpV6;
            Mac = mac;
            Name = name;
            Port = port;
            Uuid = uuid;
        }
    }

    [OutputType]
    public sealed class InstancePersonalities
    {
        /// <summary>
        /// The contents of the file. Limited to 255 bytes.
        /// </summary>
        public readonly string Content;
        /// <summary>
        /// The absolute path of the destination file.
        /// </summary>
        public readonly string File;

        [OutputConstructor]
        private InstancePersonalities(
            string content,
            string file)
        {
            Content = content;
            File = file;
        }
    }

    [OutputType]
    public sealed class InstanceSchedulerHints
    {
        /// <summary>
        /// Arbitrary key/value pairs of additional
        /// properties to pass to the scheduler.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? AdditionalProperties;
        /// <summary>
        /// An IP Address in CIDR form. The instance
        /// will be placed on a compute node that is in the same subnet.
        /// </summary>
        public readonly string? BuildNearHostIp;
        /// <summary>
        /// A list of instance UUIDs. The instance will
        /// be scheduled on a different host than all other instances.
        /// </summary>
        public readonly ImmutableArray<string> DifferentHosts;
        /// <summary>
        /// A UUID of a Server Group. The instance will be placed
        /// into that group.
        /// </summary>
        public readonly string? Group;
        /// <summary>
        /// A conditional query that a compute node must pass in
        /// order to host an instance. The query must use the `JsonFilter` syntax
        /// which is described
        /// [here](https://docs.openstack.org/nova/latest/admin/configuration/schedulers.html#jsonfilter).
        /// At this time, only simple queries are supported. Compound queries using
        /// `and`, `or`, or `not` are not supported. An example of a simple query is:
        /// </summary>
        public readonly ImmutableArray<string> Queries;
        /// <summary>
        /// A list of instance UUIDs. The instance will be
        /// scheduled on the same host of those specified.
        /// </summary>
        public readonly ImmutableArray<string> SameHosts;
        /// <summary>
        /// The name of a cell to host the instance.
        /// </summary>
        public readonly string? TargetCell;

        [OutputConstructor]
        private InstanceSchedulerHints(
            ImmutableDictionary<string, object>? additionalProperties,
            string? buildNearHostIp,
            ImmutableArray<string> differentHosts,
            string? group,
            ImmutableArray<string> queries,
            ImmutableArray<string> sameHosts,
            string? targetCell)
        {
            AdditionalProperties = additionalProperties;
            BuildNearHostIp = buildNearHostIp;
            DifferentHosts = differentHosts;
            Group = group;
            Queries = queries;
            SameHosts = sameHosts;
            TargetCell = targetCell;
        }
    }

    [OutputType]
    public sealed class InstanceVendorOptions
    {
        /// <summary>
        /// Boolean to control whether
        /// to ignore manual confirmation of the instance resizing. This can be helpful
        /// to work with some OpenStack clouds which automatically confirm resizing of
        /// instances after some timeout.
        /// </summary>
        public readonly bool? IgnoreResizeConfirmation;

        [OutputConstructor]
        private InstanceVendorOptions(bool? ignoreResizeConfirmation)
        {
            IgnoreResizeConfirmation = ignoreResizeConfirmation;
        }
    }
    }
}
